#
# File:        configure.in
# Package:     A++/P++ build system
# Copyright:   (c) 1997-2002 The Regents of the University of California
# Release:     $Name:  $
# Revision:    $Revision: 1.21 $
# Modified:    $Date: 2002/01/10 09:34:10 $
# Description: autoconfig configuration file
# 

AC_INIT

# DQ (12/26/2001) Make sure that only autoconf 2.52 or later is used
# (since so many details are not backward compatable)
AC_PREREQ(2.52)

# Make sure that the srcdir is not specified to point elsewhere
AC_CONFIG_SRCDIR([README])

# Warn user if prefix is not writable.  This is for the benefit of old users of A++P++.
# We have changed the configuration behavior, requiring the explicit specification of --prefix.
# We could not help this change.  It is aimed at sanitizing the way A++P++ is configured while
# retaining the old layout of the installed files. We want to warn users that the behavior has changed.
test "$prefix" = NONE && prefix=$ac_default_prefix
# Make sure prefix is a full path.
if echo "$prefix" | grep -v '^/' ; then
  AC_MSG_ERROR([prefix ($prefix) must be a full path.])
fi
if test "$prefix" && ( cd "$prefix" 2>/dev/null && test ! -w `pwd` ); then
  # $prefix exists and is a directory, but is not writable.
  AC_MSG_WARN([
    You have specified (possibly by default) a prefix directory for which you have no write permission
    ($prefix).  You can configure and compile A++P++, but you will be unable to \"make install\" A++P++.
    To change the path where A++P++ is installed, please issue the flag \"--prefix=/full/path\"
    on the configure command line.  To roughly replicate the old A++P++ behavior,
    you should specify \"--prefix=\`pwd\`\".  If you forget to specify a writable prefix, you
    can rerun configure with a writable prefix specified or you can override the prefix by using
    "make install prefix=/new/prefix".])
fi

PWD=`pwd`

AC_CANONICAL_HOST

# Version numbers for A++/P++ are specified in this macro defined in A++P++/config
AXXPXX_VAR_VERSION
AM_INIT_AUTOMAKE(A++P++,$AXXPXX_VERSION)

# This is required for using older make's on non-flat packages.
AC_PROG_MAKE_SET

# Optional use of Brian Miller's Performance Test Suit
AC_ARG_WITH(PERFORMANCE_TESTS,
   [  --with-PERFORMANCE_TESTS .......................... compile and run performance tests within both A++ and P++],, 
      with_PERFORMANCE_TESTS=no )
# with_PERFORMANCE_TESTS variable is exported so that other packages
# (e.g. A++ and P++) can set themselves up dependent upon the 
# use/non-use of PERFORMANCE_TESTS
export with_PERFORMANCE_TESTS;

# Setup Automake conditional to allow compilation of Performance Tests
# This must preceed the call to AC CONFIG SUBDIR
AM_CONDITIONAL(COMPILE_PERFORMANCE_TESTS,test ! "$with_PERFORMANCE_TESTS" = no)

# Inclusion of PerformanceTests and/or its sublibraries.
if test "$with_PERFORMANCE_TESTS" = no; then
   AC_MSG_NOTICE([Skipping PerformanceTests ...])
else
   AC_MSG_NOTICE([Setup PerformanceTests ...])
   AC_CONFIG_SUBDIRS(BenchmarkBase)
fi

# set up enable-P++ stuff.  By specifying --enable-PXX on the top configure
# command, we will configure and make the P++ libraries.
AC_ARG_ENABLE(PXX, [  --enable-PXX         also enable and configure P++],, enable_PXX=no)
export enable_PXX;

# Setup Automake conditional to allow compilation of P++
AM_CONDITIONAL(COMPILE_PXX_DIRECTORY,test ! "$enable_PXX" = no)

# Test for setup of P++
if test "$enable_PXX" = yes; then
   AC_MSG_NOTICE([Setup P++ (parallel array class) ...])
   AC_CONFIG_SUBDIRS(P++)
else
   AC_MSG_NOTICE([Skip P++ (parallel array class) ...])
fi

# Configure A++, P++ and Brian Miller's Benchmark project directories unconditionally
# AC_CONFIG_SUBDIRS(A++ P++ BenchmarkBase)
AC_CONFIG_SUBDIRS(A++)

# DQ (1/8/2002): Maintainer mode has been disabled (not really 
# required since m4 macro file dependence is determined automatically)
# DQ (4/14/2001) Added Maintainer Mode so that I could support the 
# development environment separately from the distribuion environment.
# The development environment has additional dependences placed on 
# the source files so that they are correctly generated from the files
# in A++P++/Common_Code.
# AM_MAINTAINER_MODE
# use conditional mechanism to introduce
# "include $(top_srcdir)/../Common_Code/make_dependence_info.inc"
# into Makefiles
# AM_CONDITIONAL(MAINTAINER_MODE, test "$enable_maintainer_mode" = yes)
# export enable_maintainer_mode;

# DQ (12/28/2001) Use Autoconf's install program (this is likely not required)
AC_PROG_INSTALL

BTNG_PATH_PROG(GTAR_BIN,gtar)

# Build the Makefile from the Makefile.in file (built by AutoMake from Makefile.am)
AC_CONFIG_FILES([Makefile])

AC_OUTPUT














