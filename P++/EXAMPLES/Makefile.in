# Makefile.in generated automatically by automake 1.5 from Makefile.am.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@


#######################################################
#           Used in A++/P++ Configuration
#######################################################

# This is required for some rules (e.g. all-recursive, and all in some directories)

SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_HEADER = $(INSTALL_DATA)
transform = @program_transform_name@
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = @host_alias@
host_triplet = @host@
AMTAR = @AMTAR@
AR = @AR@
AR_EXTRACT = @AR_EXTRACT@
AR_EXTRACT_FLAGS = @AR_EXTRACT_FLAGS@
AR_UPDATE = @AR_UPDATE@
AR_UPDATE_FLAGS = @AR_UPDATE_FLAGS@
AWK = @AWK@
CC = @CC@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXLD = @CXXLD@
CXX_DEBUG = @CXX_DEBUG@
CXX_DL_COMPILE_FLAGS = @CXX_DL_COMPILE_FLAGS@
CXX_DL_LINK_FLAGS = @CXX_DL_LINK_FLAGS@
CXX_DYNAMIC_LINKER = @CXX_DYNAMIC_LINKER@
CXX_OPT = @CXX_OPT@
CXX_OPTIONS = @CXX_OPTIONS@
CXX_SHARED_LIB_UPDATE = @CXX_SHARED_LIB_UPDATE@
CXX_STATIC_LIB_UPDATE = @CXX_STATIC_LIB_UPDATE@
CXX_TEMPLATES = @CXX_TEMPLATES@
CXX_TEMPLATE_OBJECT_FILES = @CXX_TEMPLATE_OBJECT_FILES@
CXX_TEMPLATE_REPOSITORY = @CXX_TEMPLATE_REPOSITORY@
CXX_WARNINGS = @CXX_WARNINGS@
C_DEBUG = @C_DEBUG@
C_DL_COMPILE_FLAGS = @C_DL_COMPILE_FLAGS@
C_DL_LINK_FLAGS = @C_DL_LINK_FLAGS@
C_DYNAMIC_LINKER = @C_DYNAMIC_LINKER@
C_OPT = @C_OPT@
C_OPTIONS = @C_OPTIONS@
C_WARNINGS = @C_WARNINGS@
DEPDIR = @DEPDIR@
DOXYGEN_BIN = @DOXYGEN_BIN@
DOXYSEARCH_BIN = @DOXYSEARCH_BIN@
EXEEXT = @EXEEXT@
Fortran_LIBS = @Fortran_LIBS@
GlobalArrays_INCLUDES = @GlobalArrays_INCLUDES@
GlobalArrays_LIBDIRS = @GlobalArrays_LIBDIRS@
GlobalArrays_LIBLINKS = @GlobalArrays_LIBLINKS@
GlobalArrays_LIBS = @GlobalArrays_LIBS@
GlobalArrays_PREFIX = @GlobalArrays_PREFIX@
INCLUDES = @INCLUDES@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
IndirectAddressing_SUBDIRS = @IndirectAddressing_SUBDIRS@
Kelp_INCLUDES = @Kelp_INCLUDES@
Kelp_LIBS = @Kelp_LIBS@
LD = @LD@
LIBS = @LIBS@
M4 = @M4@
MDI_C_DEBUG = @MDI_C_DEBUG@
MDI_C_OPT = @MDI_C_OPT@
MPICC = @MPICC@
MPICXX = @MPICXX@
MPIF77 = @MPIF77@
MPIF77NEEDSPP = @MPIF77NEEDSPP@
MPIFLAGS = @MPIFLAGS@
MPIINCLUDE = @MPIINCLUDE@
MPILIBDIRS = @MPILIBDIRS@
MPILIBS = @MPILIBS@
MPIRUN_MACHINEFILE = @MPIRUN_MACHINEFILE@
OBJEXT = @OBJEXT@
OPTIONAL_INDIRECT_ADDRESSING_SUBDIRS = @OPTIONAL_INDIRECT_ADDRESSING_SUBDIRS@
OPTIONAL_PADRE_SUBDIRS = @OPTIONAL_PADRE_SUBDIRS@
PACKAGE = @PACKAGE@
PADRE_DIR = @PADRE_DIR@
PADRE_INCLUDES = @PADRE_INCLUDES@
PADRE_LIBS = @PADRE_LIBS@
PARTI_DIR = @PARTI_DIR@
PARTI_INCLUDES = @PARTI_INCLUDES@
PARTI_LIBS = @PARTI_LIBS@
PERL = @PERL@
PGSLIB_DIR = @PGSLIB_DIR@
PGSLIB_INCLUDES = @PGSLIB_INCLUDES@
PGSLIB_LIBS = @PGSLIB_LIBS@
PPP_BUILD_SHARED_LIBS = @PPP_BUILD_SHARED_LIBS@
PPP_BUILD_SHARED_LIB_TARGET = @PPP_BUILD_SHARED_LIB_TARGET@
PTHREADS_LIB = @PTHREADS_LIB@
PURIFY_EXECUTABLE = @PURIFY_EXECUTABLE@
PURIFY_HOME = @PURIFY_HOME@
PURIFY_OPTIONS = @PURIFY_OPTIONS@
PURIFY_RUN_AT_EXIT = @PURIFY_RUN_AT_EXIT@
PURIFY_WINDOWS_OPTION = @PURIFY_WINDOWS_OPTION@
PXX_RPATH = @PXX_RPATH@
PXX_SUBLIBS = @PXX_SUBLIBS@
Parti_INCLUDES = @Parti_INCLUDES@
Parti_LIBS = @Parti_LIBS@
RANLIB = @RANLIB@
RUNTIME_LOADER_FLAGS = @RUNTIME_LOADER_FLAGS@
SHARED_LIBS = @SHARED_LIBS@
SHARED_LIB_EXTENSION = @SHARED_LIB_EXTENSION@
STATIC_LINKER = @STATIC_LINKER@
STATIC_LINKER_FLAGS = @STATIC_LINKER_FLAGS@
STL_DIR = @STL_DIR@
STL_INCLUDES = @STL_INCLUDES@
VERSION = @VERSION@
am__include = @am__include@
am__quote = @am__quote@
install_sh = @install_sh@
lam_INCLUDES = @lam_INCLUDES@
lam_LIBS = @lam_LIBS@
lam_PREFIX = @lam_PREFIX@
mpich_INCLUDES = @mpich_INCLUDES@
mpich_LIBS = @mpich_LIBS@
mpich_PREFIX = @mpich_PREFIX@
mpirun = @mpirun@
sla_INCLUDES = @sla_INCLUDES@
sla_LIBS = @sla_LIBS@
sla_PREFIX = @sla_PREFIX@

CXX_TEMPLATE_REPOSITORY_PATH = .

# To check a program we use the automake TESTS_ENVIRONMENT variable
# to execute the generalized-parallel-run script using TEST_NPROCS processors.
TEST_NPROCS = @TEST_NPROCS@

MAKE = gmake

# Extensions to Automake's C and C++ compiler flags.
CXXFLAGS = @CXXFLAGS@ $(CXX_DEBUG) $(CXX_DEFINES) $(CXX_OPTIONS) $(CXX_OPT) $(CXX_TEMPLATES) $(CXX_WARNINGS) $(CXX_DL_COMPILE_FLAGS)
CFLAGS = @CFLAGS@ $(C_DEBUG) $(C_OPTIONS) $(C_OPT) $(C_WARNINGS) $(C_DL_COMPILE_FLAGS)

RM = rm -f

#######################################################
#######################################################
clean_shared_libs_and_templates = rm -f *.so; rm -rf $(CXX_TEMPLATE_REPOSITORY) Templates.DB cxx_repository SunWS_cache PI* ti_files ii_files

PPP_PATH_TO_SHARED_LIB = -L$(libdir)

noinst_PROGRAMS = riemann test_MPI_initialization test_Ppp_initialization test_Ppp_execution

test_MPI_initialization_SOURCES = test_MPI_initialization.C
test_Ppp_initialization_SOURCES = test_Ppp_initialization.C
test_Ppp_execution_SOURCES = test_Ppp_execution.C

# Shock Tube Computation
riemann_SOURCES = riemann.C

LDADD = $(PPP_PATH_TO_SHARED_LIB) $(PXX_RPATH)

test_MPI_initialization_DEPENDENCIES = 
test_Ppp_initialization_DEPENDENCIES = 
test_Ppp_execution_DEPENDENCIES = 
# TESTS_ENVIRONMENT = REDIRECT_OUTPUT_TO=/dev/null sh ../generalized-parallel-run $(TEST_NPROCS)
TESTS_ENVIRONMENT = REDIRECT_OUTPUT_TO='$$program.$$nproc.stdout' REDIRECT_ERRORS_TO='$$program.$$nproc.error' NUM_PARALLEL_TRIES=2 sh ../generalized-parallel-run $(TEST_NPROCS)

TESTS = \
   test_MPI_initialization \
   test_Ppp_initialization \
   test_Ppp_execution


# Skip the test of riemann as an example program since it fails on 
# four processors this is something that I am looking into currently.
#   riemann

# A way to locally modify the C++ options for the Makefile built in this directory
AM_CXXFLAGS = -g

EXTRA_DIST = \
  Makefile.user Makefile.user.defs.in

subdir = EXAMPLES
mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = Makefile.user.defs
noinst_PROGRAMS = riemann$(EXEEXT) test_MPI_initialization$(EXEEXT) \
	test_Ppp_initialization$(EXEEXT) test_Ppp_execution$(EXEEXT)
PROGRAMS = $(noinst_PROGRAMS)

am_riemann_OBJECTS = riemann.$(OBJEXT)
riemann_OBJECTS = $(am_riemann_OBJECTS)
riemann_LDADD = $(LDADD)
riemann_DEPENDENCIES =
riemann_LDFLAGS =
am_test_MPI_initialization_OBJECTS = test_MPI_initialization.$(OBJEXT)
test_MPI_initialization_OBJECTS = $(am_test_MPI_initialization_OBJECTS)
test_MPI_initialization_LDADD = $(LDADD)
test_MPI_initialization_LDFLAGS =
am_test_Ppp_execution_OBJECTS = test_Ppp_execution.$(OBJEXT)
test_Ppp_execution_OBJECTS = $(am_test_Ppp_execution_OBJECTS)
test_Ppp_execution_LDADD = $(LDADD)
test_Ppp_execution_LDFLAGS =
am_test_Ppp_initialization_OBJECTS = test_Ppp_initialization.$(OBJEXT)
test_Ppp_initialization_OBJECTS = $(am_test_Ppp_initialization_OBJECTS)
test_Ppp_initialization_LDADD = $(LDADD)
test_Ppp_initialization_LDFLAGS =

DEFS = @DEFS@
DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
depcomp =
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
DIST_SOURCES = $(riemann_SOURCES) $(test_MPI_initialization_SOURCES) \
	$(test_Ppp_execution_SOURCES) \
	$(test_Ppp_initialization_SOURCES)
DIST_COMMON = README Makefile.am Makefile.in Makefile.user.defs.in
SOURCES = $(riemann_SOURCES) $(test_MPI_initialization_SOURCES) $(test_Ppp_execution_SOURCES) $(test_Ppp_initialization_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .C .o .obj
$(srcdir)/Makefile.in:  Makefile.am $(srcdir)/../../config/Makefile.config.in $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  --ignore-deps EXAMPLES/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && \
	  CONFIG_HEADERS= CONFIG_LINKS= \
	  CONFIG_FILES=$(subdir)/$@ $(SHELL) ./config.status
Makefile.user.defs: $(top_builddir)/config.status Makefile.user.defs.in
	cd $(top_builddir) && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= CONFIG_LINKS= $(SHELL) ./config.status

clean-noinstPROGRAMS:
	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)
riemann$(EXEEXT): $(riemann_OBJECTS) $(riemann_DEPENDENCIES) 
	@rm -f riemann$(EXEEXT)
	$(CXXLINK) $(riemann_LDFLAGS) $(riemann_OBJECTS) $(riemann_LDADD) $(LIBS)
test_MPI_initialization$(EXEEXT): $(test_MPI_initialization_OBJECTS) $(test_MPI_initialization_DEPENDENCIES) 
	@rm -f test_MPI_initialization$(EXEEXT)
	$(CXXLINK) $(test_MPI_initialization_LDFLAGS) $(test_MPI_initialization_OBJECTS) $(test_MPI_initialization_LDADD) $(LIBS)
test_Ppp_execution$(EXEEXT): $(test_Ppp_execution_OBJECTS) $(test_Ppp_execution_DEPENDENCIES) 
	@rm -f test_Ppp_execution$(EXEEXT)
	$(CXXLINK) $(test_Ppp_execution_LDFLAGS) $(test_Ppp_execution_OBJECTS) $(test_Ppp_execution_LDADD) $(LIBS)
test_Ppp_initialization$(EXEEXT): $(test_Ppp_initialization_OBJECTS) $(test_Ppp_initialization_DEPENDENCIES) 
	@rm -f test_Ppp_initialization$(EXEEXT)
	$(CXXLINK) $(test_Ppp_initialization_LDFLAGS) $(test_Ppp_initialization_OBJECTS) $(test_Ppp_initialization_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

.C.o:
	$(CXXCOMPILE) -c -o $@ `test -f $< || echo '$(srcdir)/'`$<

.C.obj:
	$(CXXCOMPILE) -c -o $@ `cygpath -w $<`
uninstall-info-am:

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || etags $(ETAGS_ARGS) $$tags  $$unique $(LISP)

GTAGS:
	here=`CDPATH=: && cd $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
	        xpass=`expr $$xpass + 1`; \
	        failed=`expr $$failed + 1`; \
	        echo "XPASS: $$tst"; \
	      ;; \
	      *) \
	        echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
	        xfail=`expr $$xfail + 1`; \
	        echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
	        failed=`expr $$failed + 1`; \
	        echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes=`echo "$$banner" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	fi

DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@for file in $(DISTFILES); do \
	  if test -f $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    $(mkinstalldirs) "$(distdir)/$$dir"; \
	  fi; \
	  if test -d $$d/$$file; then \
	    cp -pR $$d/$$file $(distdir) \
	    || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS check-local
check: check-am
all-am: Makefile $(PROGRAMS)

installdirs:

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES) stamp-h stamp-h[0-9]*

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-local clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am: install-data-local
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-data-hook

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

uninstall-am: uninstall-info-am uninstall-local

.PHONY: GTAGS all all-am check check-TESTS check-am check-local clean \
	clean-generic clean-local clean-noinstPROGRAMS distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am info info-am install install-am install-data \
	install-data-am install-data-local install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic tags uninstall uninstall-am \
	uninstall-info-am uninstall-local


#############################################################################################
######################   SPECIAL TARGET FOR BUILDING SOURCE CODE   ##########################
#############################################################################################

macros_and_source:
	cd $(srcdir) && $(MAKE) -f makefile.build all_source

source:
	cd $(srcdir) && $(MAKE) -f makefile.build source

templates-clean:
	cd $(srcdir) && $(MAKE) -f makefile.build templates-clean

all-but-MDI-clean:
	cd $(srcdir) && $(MAKE) -f makefile.build all-but-MDI-clean

MDI-source:
	cd $(srcdir) && $(MAKE) -f makefile.build MDI-source

OPERATORS-source:
	cd $(srcdir) && $(MAKE) -f makefile.build OPERATORS-source

all-source:
	cd $(srcdir) && $(MAKE) -f makefile.build all-source

entire-MDI-source:
	cd $(srcdir) && $(MAKE) -f makefile.build entire-MDI-source

entire-OPERATORS-source:
	cd $(srcdir) && $(MAKE) -f makefile.build entire-OPERATORS-source

entire-all-source:
	cd $(srcdir) && $(MAKE) -f makefile.build entire-all-source

MDI-source-clean:
	cd $(srcdir) && $(MAKE) -f makefile.build MDI-source-clean

OPERATORS-source-clean:
	cd $(srcdir) && $(MAKE) -f makefile.build OPERATORS-source-clean

all-source-clean:
	cd $(srcdir) && $(MAKE) -f makefile.build all-source-clean

#############################################################################################
###################   SPECIAL TARGET FOR EVLUATING DISK SPACE USAGE   #######################
#############################################################################################

object_size:
	echo "Size of Object Files = " `wc -c *.o | grep total | cut -d " " -f 2` 

code_size:
	echo "Size of Source Files = " `wc -c *.[c,C] | grep total | cut -d " " -f 2`

# This checks the examples mechanism.
# It issues the commands as the user would.
# It tests whether we created Makefile.user and Makefile.user.defs correctly.
# For more info, see comments in Makefile.user.
# BTNG
check-local:
	$(MAKE) Makefile.user.defs
	if [ ! -r Makefile.user  ]; then	\
	  ln -s $(srcdir)/Makefile.user .;	\
	fi
	@echo Testing user example environments, Makefile.user, etc.
	@echo   Making clean
	$(MAKE) -f Makefile.user USER_APPLICATION=./test_Ppp_execution USER_APPLICATION_OBJECTS=test_Ppp_execution.o clean
	@echo   Making executable
	$(MAKE) -f Makefile.user USER_APPLICATION=./test_Ppp_execution USER_APPLICATION_OBJECTS=test_Ppp_execution.o compile
	@echo   Making run
	$(MAKE) -f Makefile.user USER_APPLICATION=./test_Ppp_execution USER_APPLICATION_OBJECTS=test_Ppp_execution.o run > user-run-output

install-data-local:
	$(INSTALL_DATA) Makefile.user.defs $(DESTDIR)$(libdir)/..

uninstall-local:
	rm -f $(DESTDIR)$(libdir)/../Makefile.user.defs

# Rule to check the installation after it is run
# (test compilation using the new installed header files and libraries)
install-data-hook: installcheck
installcheck:
	@if test -r $(DESTDIR)$(libdir)/../Makefile.user.defs; then \
		echo "Verified presence of Makefile.user.defs file in installation"; \
	  else \
		echo "Can't find Makefile.user.defs file in installation"; \
		exit 1; \
	fi

# Purify related flags
# PURIFY_USE_WINDOWS = -windows=yes
# PURIFY_FLAGS  = $(PURIFY_USE_WINDOWS) -recursion-depth-limit=40000 -chain-length=24 -first-only=yes -leaks-at-exit=yes -inuse-at-exit=yes -always-use-cache-dir=yes -cache-dir=/home/dquinlan/tmp
# PURIFY        = purify4.5 $(PURIFY_FLAGS)
# New version of purify
# PURIFY        = /usr/local/pure/purify-5.1-solaris2/purify $(PURIFY_FLAGS)

clean-local:
	rm -f *.*.stdout *.*.error
	$(clean_shared_libs_and_templates)
	rm -f user-run-output
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
