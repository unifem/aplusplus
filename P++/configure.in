#
# File:        configure.in
# Package:     A++/P++ build system
# Release:     $Name:  $
# Revision:    $Revision: 1.63 $
# Modified:    $Date: 2002/01/10 09:34:36 $
# Description: AutoConf configuration file
#

AC_INIT

# DQ (12/26/2001) Make sure that only autoconf 2.52 or later is used (since so many details are not backward compatabile)
AC_PREREQ(2.52)

AC_CONFIG_SRCDIR([README])

PWD=`pwd`

# To change the version numbering of A++/P++ edit this macro in A++P++/config
AXXPXX_VAR_VERSION
AM_INIT_AUTOMAKE(P++,$AXXPXX_VERSION)

# AC_MSG_NOTICE([Run AM CONFIG HEADER ...])
AM_CONFIG_HEADER(config.h:config.hin)
# AM_CONFIG_HEADER(config.h)
# AC_MSG_NOTICE([DONE: Run AM CONFIG HEADER ...])

# Test for setup of P++
if test "$enable_PXX" = yes; then
   AC_MSG_NOTICE([Run tests to verify MPI ...])
   echo "In A++P++/P++/configure.in (before PPP SPECIFIC SETUP setting INCLUDES variable): INCLUDES = $INCLUDES"
   PPP_SPECIFIC_SETUP
   echo "In A++P++/P++/configure.in (after PPP SPECIFIC SETUP setting INCLUDES variable): INCLUDES = $INCLUDES"
   if test "$with_PADRE" = yes; then
      AC_MSG_NOTICE([Run PADRE specific setup ...])
      echo "In A++P++/P++/configure.in (before PADRE SPECIFIC SETUP setting INCLUDES variable): INCLUDES = $INCLUDES"
      PPP_PADRE_SPECIFIC_SETUP
      echo "In A++P++/P++/configure.in (after PADRE SPECIFIC SETUP setting INCLUDES variable): INCLUDES = $INCLUDES"
   else
      AC_MSG_NOTICE([Skip PADRE specific setup ... (using PARTI directly)])
      # ln -s PADRE/PARTI PARTI
   fi
else
   AC_MSG_NOTICE([Skip tests to verify MPI ...])
fi

# DQ (12/26/2001) I have merged the two modifications of the INCLUDES variable below
# Add the P++/include directory to INCLUDES.
# Do this after having all the external header components have been added
# so we can be sure that P++/include comes before those.
# INCLUDES='-I${top_srcdir}/include '"$INCLUDES"

# Finally, place source and build directories first in INCLUDES.
# We want to make sure that these go first because header files in
# those directories would not be there if they were not meant to be
# used.  Make sure they chosen when there is a choice.  BTNG.
BTNG_AC_LOG([Before adding source and build directories, INCLUDES is $INCLUDES])
echo "In A++P++/P++/configure.in (before setting INCLUDES variable): INCLUDES = $INCLUDES"
# INCLUDES='-I. -I${srcdir} -I${top_builddir} '"$INCLUDES"
INCLUDES='-I. -I${srcdir} -I${top_builddir} -I${top_srcdir}/include '"$INCLUDES"
echo "In A++P++/P++/configure.in (after setting INCLUDES variable): INCLUDES = $INCLUDES"

# After running configure remove any templates generated as part of autoconf tests
AC_CONFIG_COMMANDS_PRE([rm -rf Templates.DB cxx_repository])

# Comment out the construction of the PerformanceTest directory (old version of performance work)
# PerformanceTest/Makefile
# Benchmark/Makefile
# CHECKS/Makefile
# BUGS/Makefile
# bgDeveloperTests/Makefile
# bgDeveloperTests/Makefile.user.defs
# PerformanceTests/Makefile
# config/Makefile
# PADRE/PARTI/Makefile

# Note that I have added stamp-h so that we don't force config.status to be run after configure
# Previously, config.h would always be unneccesarily rebuilt after rerunning configure.
# However, Automake warns that stamp-h should not appear in the list of AC CONFIG FILE inputs.
# stamp-h

# Remove the existing PARTI directory so it can be rebuilt
echo "Removing P++/PARTI directory which could be a link due to previous configuration (rm -f PARTI)."
rm -f PARTI

echo "In P++/configure.in: ARCH = $ARCH"

AC_CONFIG_FILES([
stamp-h
Makefile
PerformanceTests/Makefile
src/Makefile
src/array_src/Makefile
src/OPERATORS/Makefile
src/MDI/Makefile
include/Makefile
TESTS/Makefile
EXAMPLES/Makefile
dqDeveloperTests/Makefile
generalized-parallel-run
EXAMPLES/Makefile.user.defs
PARTI/Makefile
PADRE/Makefile
PADRE/IndirectAddressing/Makefile
PADRE/PGSLIB/Makefile
PADRE/src/Makefile
])

AC_CONFIG_COMMANDS([default],[[
# These are the commands that will execute after the file generations.
chmod 750 generalized-parallel-run
# cp generalized-parallel-run dqDeveloperTests
cat config.h | sed 's/^\(.define COMPILE_PPP\) ./\1 0/' > include/config.h
cat config.h | sed 's/^\(.define COMPILE_PPP\) ./\1 1/' > src/array_src/config.h
cat config.h | sed 's/^\(.define COMPILE_PPP\) ./\1 1/' > src/OPERATORS/config.h
cat config.h | sed 's/^\(.define COMPILE_PPP\) ./\1 1/' > src/MDI/config.h
if test "$source_tree_is_not_compile_tree"; then
  case "$srcdir" in
  /*) # srcdir is a full path
    srcdir_EXAMPLES="$srcdir/EXAMPLES"
  ;;
  *) # srcdir is a relative path
    srcdir_EXAMPLES="../$srcdir/EXAMPLES"
  ;;
  esac
  echo "Ensuring test_Ppp_execution.C in the compile tree."
  test -r EXAMPLES/test_Ppp_execution.C || \
    ln -s $srcdir_EXAMPLES/test_Ppp_execution.C EXAMPLES
  echo "Ensuring Makefile.user in the compile tree."
  test -r EXAMPLES/Makefile.user || \
    ln -s $srcdir_EXAMPLES/Makefile.user EXAMPLES
fi
]],[[
# These set the environment for commands executing after file generations.
srcdir=$srcdir
if test ! `cd $srcdir && pwd -P` = `pwd -P`; then
  source_tree_is_not_compile_tree=1
  # echo "Making a link to the PADRE/PARTI directory for support of P++ without PADRE"
  # rm -f PARTI
  # ln -s PADRE/PARTI PARTI
fi

]])

AC_OUTPUT

# I want these files to be copied into my development directory in the compile tree
if test "$enable_dq_developer_tests" = yes; then
   if test -r $srcdir/dqDeveloperTests/purify_access_errors; then 
        AC_MSG_WARN([Do NOT copy the purify_access_errors file])
   else
        AC_MSG_RESULT([Do copy the purify_access_errors file])
        cp -f $srcdir/dqDeveloperTests/purify_access_errors dqDeveloperTests/purify_access_errors
   fi

   if test -r $srcdir/dqDeveloperTests/purify_bytes_leaked; then 
        AC_MSG_WARN([Do NOT copy the purify_bytes_leaked file])
   else
        AC_MSG_RESULT([Do copy the purify_bytes_leaked file])
        cp -f $srcdir/dqDeveloperTests/purify_bytes_leaked dqDeveloperTests/purify_bytes_leaked
   fi

   if test -r $srcdir/dqDeveloperTests/purify_bytes_potentially_leaked; then 
        AC_MSG_WARN([Do NOT copy the purify_bytes_potentially_leaked file])
   else
        AC_MSG_RESULT([Do copy the purify_bytes_potentially_leaked file])
        cp -f $srcdir/dqDeveloperTests/purify_bytes_potentially_leaked dqDeveloperTests/purify_bytes_potentially_leaked
   fi

   if test -r $srcdir/dqDeveloperTests/purify_check; then 
        AC_MSG_WARN([Do NOT copy the purify_check file])
   else
        AC_MSG_RESULT([Do copy the purify_check file])
        cp -f $srcdir/dqDeveloperTests/purify_check dqDeveloperTests/purify_check
   fi
fi







