// *****************************************************************
// BUG ALERT --- BUG ALERT --- BUG ALERT --- BUG ALERT --- BUG ALERT
// *****************************************************************
// BUG DISCRIPTION: A bug in the Sun C++ compiler was found which
// is particularly difficult to figure out. ALL template class member
// function not defined in the header file MUST be declared before any
// of the member function defined in the header file!!!!!  If this is not
// done then the compiler will not search the *.C file and will not instantiate
// the template function.  The result is that templated member function will not
// be found at link time of any application requiring the templated class's member
// function.
// *****************************************************************
// BUG ALERT --- BUG ALERT --- BUG ALERT --- BUG ALERT --- BUG ALERT
// *****************************************************************

// file: PADRE_Parti.h

#ifndef PADRE_PARTI_H
#define PADRE_PARTI_H

/* include <PADRE_config.h> */
/* Define to enable PADRE code to use the MPI message passing interface */
#define PADRE_ENABLE_MP_INTERFACE_MPI 1

#include <PADRE_macros.h>
#ifndef MAX_PROCESSORS
#error "MAX_PROCESSORS is not defined"
#endif
#include <PADRE_forward-declarations.h>

extern "C" {
#include "bsparti.h"
}

// *wdh* #include <iostream.h>
#include <iostream>
using namespace std;

// STL headers.
#ifndef STL_LIST_HEADER_FILE
#define STL_LIST_HEADER_FILE <list.h>
#endif
#include STL_LIST_HEADER_FILE

#ifndef NAMESPACE_IS_BROKEN
using namespace std;
#endif


// This specifies the maximum array dimension that PARTI can handle 
// (this is presently 4 -- but we have the code (untested) that 
// would allow it to be user defined at compile time).

#define PARTI_MAX_ARRAY_DIMENSION 6
#if PARTI_MAX_ARRAY_DIMENSION == 4
#define REPEAT_MAX_ARRAY_DIMENSION_TIMES(A) A,A,A,A
#define IOTA_MAX_ARRAY_DIMENSION_TIMES 0,1,2,3
#define FILL_MACRO(A,B) { A[0]=B; A[1]=B; A[2]=B; A[3]=B; }
#elif PARTI_MAX_ARRAY_DIMENSION == 6
#define REPEAT_MAX_ARRAY_DIMENSION_TIMES(A) A,A,A,A,A,A
#define IOTA_MAX_ARRAY_DIMENSION_TIMES 0,1,2,3,4,5
#define FILL_MACRO(A,B) { A[0]=B; A[1]=B; A[2]=B; A[3]=B; A[4]=B; A[5]=B; }
#else
#error "Current code in PADRE_Parti.h can only handle PARTI_MAX_ARRAY_DIMENSION of 4 or 6"
#endif

// This variable provides a means of communicating the Number of processors and a common
// name to use in referencing the PVM group of processors to the lower level parallel 
// library.

extern int   Global_PARTI_PADRE_Interface_Number_Of_Processors;
extern char* Global_PARTI_PADRE_Interface_Name_Of_Main_Processor_Group;

class PARTI
{
private:
  PARTI ( const PARTI & X );
  PARTI & operator= ( const PARTI & X );
public:
 ~PARTI ();
  PARTI ();

  static bool isPARTIInitialized ();

  // PARTI must know the number of processors internally

  static int numberOfProcessors;

  // PARTI needs this: array of virtual processors (processor space)

  static VPROC *VirtualProcessorSpace;

  // the PVM interface needs these

  static int My_Task_ID;

  static char* MainProcessorGroupName;

  static int Task_ID_Array[MAX_PROCESSORS]; // array of task id

  // This variable is used within the Sync member function to
  // determine if the parallel machine has been initialized.
  // It is default initialized to be -1 and if it is -1 then
  // the parallel machine has NOT been initialized.  If it is
  // a valid processor number (greater than 0) then the parallel
  // machine has been initialized.
  // at a later point we should have a static member function that
  // determines if the parallel machine has been initialized.

  static int My_Process_Number;             // my process number

  static void SublibraryInitialization ();

  static int localProcessNumber();

  static bool isParallelMachineInitialized() { return (My_Process_Number != -1); }

  // Tests the internal consistency of the object
  void testConsistency ( const char *Label = "" ) const;

  static void freeMemoryInUse ();

  friend ostream & operator<< (ostream & os, const PARTI & X)
  {
    os << "{PARTI:  "
       << "isPARTIInitialized() = " << X.isPARTIInitialized()
       << ", numberOfProcessors = " << PARTI::numberOfProcessors
       << ", My_Task_ID = " << PARTI::My_Task_ID << endl
       << ", My_Process_Number = " << PARTI::My_Process_Number
       << ", localProcessNumber() = " << X.localProcessNumber() << endl
       << ", isParallelMachineInitialized() = " << PARTI::isParallelMachineInitialized()
       << "}" << endl;
    return os;
  }

public: static void setFortranOrderingFlag( int f ) {
  FFlag = f;
}

}; // end class PARTI


template<class UserCollection, class UserGlobalDomain, class UserLocalDomain>
class PARTI_Distribution 
// : public PARTI_CommonInterface
   {
     private:
     // friend PADRE_Distribution::PADRE_Distribution();
     // template<class UserCollection, class UserGlobalDomain, class UserLocalDomain>
        friend class PADRE_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain>;

     // In the case of P++ this is the list of array objects which use this partition object
     // This uses the STL list container class
        list<UserCollection*> *UserCollectionList;

        static PARTI_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain>* defaultDistribution;

        int referenceCount;

  // Within the restrictions of the Block Parti partitioning only the
  // starting and ending processor may be specified.  Further the range
  // must refer to a contiguous subset of virtual processors in the
  // virtual processor space.

  // This is the maximum number of axes that this distribution object will use
  static int defaultDistributionDimension;
  int distributionDimension;

  // This descibes a range of processors (both for the 
  // defaults and for each PARTI_Distribution object).
  static int defaultStartingProcessor;
  static int defaultEndingProcessor;
  int startingProcessor, endingProcessor;

  // These are the widths used to setup the P++ arrays -- however the P++ arrays can
  // reset there own ghost boundary widths and so these are not the default values for
  // a specific instance of a partitioning object and not the same as the static 
  // DefaultGhostCellWidth for the partitioning_type class.
  
  // static int defaultGhostCellWidth; // [PARTI_MAX_ARRAY_DIMENSION];
  static int defaultGhostCellWidth [PARTI_MAX_ARRAY_DIMENSION];
  int LocalGhostCellWidth  [PARTI_MAX_ARRAY_DIMENSION];
  

#if 0
       defaultDistribution_String         [temp] = 'B';
       defaultLocalGhostCellWidth         [temp] =  0;
    // defaultGhostCellWidth              [temp] =  0;
       defaultArrayDimensionsToAlign      [temp] =  temp;
       defaultExternalGhostCellArrayLeft  [temp] =  0;
       defaultExternalGhostCellArrayRight [temp] =  0;
       defaultPartitionControlFlags       [temp] =  0;
       defaultDecomposition_Dimensions    [temp] =  temp;
#endif

  // Specify block distribution (choice of "*" UNDISTRIBUTED "B" BLOCK "C" CYCLIC distribution)
  // However the CYCLIC distribution is not yet implemented in Block Parti
  // The length of the string is the number of dimensions that will be distributed
  // Specify block distribution (choice of "*"-Undistributed or 
  // "B"-Block or "C"-Cyclic distribution)

  static char defaultDistribution_String [PARTI_MAX_ARRAY_DIMENSION];
  char Distribution_String [PARTI_MAX_ARRAY_DIMENSION];

  // Default and user specified ArrayDimensionsToAlign
  
  static int defaultArrayDimensionsToAlign [PARTI_MAX_ARRAY_DIMENSION];
  int ArrayDimensionsToAlign [PARTI_MAX_ARRAY_DIMENSION];
  
  // PARTI permits the user to specify an extended region around the perimeter of 
  // a distributed domain.  These values may be specified independently for the 
  // right/left, top/bottom, etc.  They are unused in P++ but we make them 
  // available here.  These might not be accessible from PADRE!
  
  static int defaultExternalGhostCellArrayLeft [PARTI_MAX_ARRAY_DIMENSION];
  int ExternalGhostCellArrayLeft [PARTI_MAX_ARRAY_DIMENSION];
  
  static int defaultExternalGhostCellArrayRight [PARTI_MAX_ARRAY_DIMENSION];
  int ExternalGhostCellArrayRight [PARTI_MAX_ARRAY_DIMENSION];
  
  // PARTI permits some limited control over how each axis of the domain is distributed
  // (see the PARTI manual for more info on these).
  
  static int defaultPartitionControlFlags [PARTI_MAX_ARRAY_DIMENSION];
  int PartitionControlFlags [PARTI_MAX_ARRAY_DIMENSION];
  
  // See the PARTI manual for more info!

  static int defaultDecomposition_Dimensions [PARTI_MAX_ARRAY_DIMENSION];
  int Decomposition_Dimensions [PARTI_MAX_ARRAY_DIMENSION];
        PARTI_Distribution();

public:
  ~PARTI_Distribution();
   PARTI_Distribution( const PARTI_Distribution & X );
   PARTI_Distribution & operator= ( const PARTI_Distribution & X );
   PARTI_Distribution( int inputNumberOfProcessors );
   PARTI_Distribution( int startingProcessor, int endingProcessor );

     // Access functions to the default distribution
        static PARTI_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain> & 
             getDefaultDistribution();
        static PARTI_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain> * 
             getDefaultDistributionPointer();

   static void freeMemoryInUse();
   void initialize ();
   static void staticInitialize ();

   void setProcessorRange( int startingProcessor, int endingProcessor );
   static void setDefaultProcessorRange( int startingProcessor, int endingProcessor );
   void testConsistency( const char *label = "" ) const;
   static void displayDefaultValues ( const char *Label = "" );
   void display ( const char *label = "" ) const;
   void displayReferenceCounts ( const char *label ) const;

#if 0
// This function(s) encapsulate all the message passing 
// (the construction of the schedule and its execution)
// for the most general transfer of data possible within PARTI
// At a later point this might be a templated member function
// although PARTI would have to be modified to permit the use of
// a templated type for the array element type
   void regularSectionTransfer ( const UserLocalDomain & LhsDomain,
                                 const float *LhsData,
                                 const UserLocalDomain & RhsDomain,
                                 const float *RhsData );
#endif

// *****************************************************************
// BUG ALERT --- BUG ALERT --- BUG ALERT --- BUG ALERT --- BUG ALERT
// *****************************************************************
// BUG DISCRIPTION: It bug in the Sun C++ compiler was found which
// is particularly difficult to figure out. ALL template class member
// function not defined in the header file MUST be declared before any
// of the member function defined in the header file!!!!!  If this is not
// done then the compiler will not search the *.C file and will not instantiate
// the template function.  The result is that templated member function will not
// be found at link time of any application requiring the templated class's member
// function.
// *****************************************************************
// BUG ALERT --- BUG ALERT --- BUG ALERT --- BUG ALERT --- BUG ALERT
// *****************************************************************

   void incrementReferenceCount () const
      { ((PARTI_Distribution*) this)->referenceCount++; }
   void decrementReferenceCount () const
      { ((PARTI_Distribution*) this)->referenceCount--; }
   int getReferenceCount () const
      { return referenceCount; }
   static int getReferenceCountBase ()
      { return 1; }

   list<UserCollection*> *getUserCollectionList() const
      {
        PADRE_ASSERT (UserCollectionList != NULL);
        return UserCollectionList;
      }

   void setUserCollectionList( list<UserCollection*> *List )
      {
        PADRE_ASSERT (List != NULL);
        UserCollectionList = List;
        PADRE_ASSERT (UserCollectionList != NULL);
      }

// Should we have default values of Partition_Axis = true and GhostBoundaryWidth = 0?
   void DistributeAlongAxis ( int Axis, bool Partition_Axis, int GhostBoundaryWidth )
      {
     // We use the blloean variable becuase it make it easier to call
     // this function withina loop (typically over all the dimensions)
        if (Partition_Axis == true)
             Distribution_String [Axis] = 'B';
          else
             Distribution_String [Axis] = '*';

        LocalGhostCellWidth [Axis] = GhostBoundaryWidth;
      }

  ostream &show( ostream &os ) const {
    os << *this; return os;
    /* This is just an interface to the friend operator<<,
       but g++-2.91.66 sometimes have problems instantiating
       the latter when directly used.  BTNG.
     */
  }
  friend ostream & operator<< ( ostream & os, const PARTI_Distribution & X)
  {
    os << "{PARTI_Distribution:  "
       << "Starting_Processor = " << X.startingProcessor
       << ", Ending_Processor = " << X.endingProcessor
       << ", more information as yet omitted"
       << "}" << endl;
    return os;
  }

  int getNumberOfAxesToDistribute() const
  { return distributionDimension; }

  int getInternalGhostCellWidth ( int axis ) const
  {
    return LocalGhostCellWidth[axis];
  }

  int getExternalGhostCellWidth ( int axis ) const
  {
    return ExternalGhostCellArrayLeft[axis];
  }

  void getInternalGhostCellWidthArray ( int* Values ) const
  {
    for (int i=0; i < PARTI_MAX_ARRAY_DIMENSION; i++)
       {
         Values[i] = LocalGhostCellWidth[i];
       }
  }

  void getExternalGhostCellWidthArray ( int* Values ) const
  {
    for (int i=0; i < PARTI_MAX_ARRAY_DIMENSION; i++)
       {
         PADRE_ASSERT (ExternalGhostCellArrayLeft[i] == ExternalGhostCellArrayRight[i]);
         Values[i] = ExternalGhostCellArrayLeft[i];
       }
  }

  char* getDistributionString () const
  { return (char*) Distribution_String; }

  int getStartingProcessor () const
  { return startingProcessor; }

  int getEndingProcessor () const
  { return endingProcessor; }

  int getDefaultStartingProcessor () const
  { return defaultStartingProcessor; }

  int getDefaultEndingProcessor () const
  { return defaultEndingProcessor; }

  int* getArrayDimensionsToAlign () const
  { return (int*) ArrayDimensionsToAlign; }

  int* getPartitionControlFlags () const
  { return (int*) PartitionControlFlags; }

  int* getDecomposition_Dimensions () const
  { return (int*) Decomposition_Dimensions; }

// private:
//void initialize (); // { xxxxxxxxx };
//static void staticInitialize ();


}; // end class PARTI_Distribution


// Forward class declaration 
template<class UserCollection, class UserGlobalDomain, class UserLocalDomain> 
class PARTI_Descriptor;


template<class UserCollection, class UserGlobalDomain, class UserLocalDomain>
class PARTI_Representation
{
// At some point we should move these data to be private and provide acess functions
public:

  // Contains PARTI specific parts of P++ descriptor
  // Pointer to a P++ partitioning object
  //?? Partitioning_Type *Partitioning_Object_Pointer;
  
  PARTI_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain> *Distribution;

// This should be a global domain which is translation independent
// It will likely share a pointer with the PADRE_Representation object's globalDomain
  UserLocalDomain *globalDomain;

  // Pointer to Block-Parti parallel decomposition (object)
  DECOMP *BlockPartiArrayDecomposition;

  // Pointer to Block-Parti parallel distributed array descriptor
  DARRAY *BlockPartiArrayDescriptor;
  
public:
//int isLeftPartition   (int i) const;
//int isMiddlePartition (int i) const;
//int isRightPartition  (int i) const;
//int isNonPartition    (int i) const;


  ~PARTI_Representation();

  PARTI_Representation();
  PARTI_Representation( const PARTI_Representation & X );
  PARTI_Representation( const UserLocalDomain *inputGlobalDomain );
  PARTI_Representation( const PARTI_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain> 
			  & distribution, 
			const UserLocalDomain *inputGlobalDomain );
  PARTI_Representation( const PADRE_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain> 
			  & distribution, 
			const UserLocalDomain *inputGlobalDomain );
  
  PARTI_Representation & operator= ( const PARTI_Representation & X );

  PARTI_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain> & getPARTI_Distribution() const
     { return *(((PARTI_Representation<UserCollection, UserGlobalDomain, UserLocalDomain>*)this)->Distribution); }

  static void freeMemoryInUse();

   int referenceCount;
   void incrementReferenceCount () const
      { ((PARTI_Representation*) this)->referenceCount++; }
   void decrementReferenceCount () const
      { ((PARTI_Representation*) this)->referenceCount--; }
   int getReferenceCount () const
      { return referenceCount; }
   static int getReferenceCountBase ()
      { return 1; }

  UserLocalDomain* getGlobalDomainPointer()
     { 
       PADRE_ASSERT (globalDomain != NULL);
       return globalDomain; 
     }

  int getInternalGhostCellWidth ( int axis ) const
  {
    return getPARTI_Distribution().getInternalGhostCellWidth(axis);
  }

  // Tests the internal consistency of the object
  void testConsistency ( const char *Label = "" ) const;

  void getLocalSizes ( int* LocalSizeArray );

  static void displayDefaultValues ( const char *Label = "" );
  void display ( const char *Label = "" ) const;
  void displayReferenceCounts ( const char *label ) const;

  // We need to get this function from P++ where it resides currently
  // void testConsistency ( const DARRAY* BlockPartiArrayDescriptor, const char *label = "" ) const {};

  static void SpecifyDecompositionEmbeddingIntoVirtualProcessorSpace (
              DECOMP* BlockParti_Decomposition_Pointer ,
              int StartingProcessor , int EndingProcessor );

  DECOMP* Build_BlockPartiDecomposition(
    const PARTI_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain> & distribution, 
    int *Array_Sizes );

  DARRAY* Build_BlockPartiDescriptor (
    const PARTI_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain> & distribution,
    DECOMP* BlockPartiArrayDecomposition,
    int *Array_Sizes ,
    int* InternalGhostCellWidth, 
    int* ExternalGhostCellWidth );

  friend ostream & operator<< (ostream & os, const PARTI_Representation & X)
  {
    os << "{PARTI_Represention:  "
       << ", more information as yet omitted"
       << "}" << endl;
    return os;
  }

  static void displaySCHED  ( SCHED*  X );
  static void displayDARRAY ( DARRAY* X );
  static void displayDECOMP ( DECOMP* X );

private: void initialize ();

public: DARRAY *getBlockPartiArrayDescriptor() { return BlockPartiArrayDescriptor; }
public: int nDims() { return getBlockPartiArrayDescriptor()->nDims; }
};


template<class UserCollection, class UserGlobalDomain, class UserLocalDomain>
class PARTI_Descriptor {
  // This is analogous to the PADRE_Descriptor class (though without the pointer to the data)
     public:
       // This should be a global domain which is translation independent
          UserLocalDomain *globalDomain;
       // This is a local domain not a global domain and it is not translation independent
          UserLocalDomain *localDomain;
          PARTI_Representation<UserCollection, UserGlobalDomain, UserLocalDomain> *representation;
          UserGlobalDomain *localDescriptor;

         ~PARTI_Descriptor ();

       // The only useful constructor!
       // PARTI_Descriptor 
       //    ( const UserLocalDomain *globalDomain, 
       //      const PARTI_Representation<UserCollection, UserGlobalDomain, UserLocalDomain> *inputRepresentation );
          PARTI_Descriptor 
             ( const UserLocalDomain *inputGlobalDomain,
               const UserLocalDomain *inputLocalDomain,
               const PARTI_Representation<UserCollection, UserGlobalDomain, UserLocalDomain> *inputRepresentation, 
               const UserGlobalDomain *inputLocalDescriptor );

          static void swapDistribution 
             ( const PADRE_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain> & oldDistribution ,
               const PADRE_Distribution<UserCollection, UserGlobalDomain, UserLocalDomain> & newDistribution );

          static void freeMemoryInUse();
          void testConsistency ( const char *label = "" ) const;
          void testConsistency2( const char *label = "" ) const;

          static void displayDefaultValues ( const char *Label = "" );
          void display ( const char *Label = "" ) const;
          void displayReferenceCounts ( const char *label ) const;

          int referenceCount;
          void incrementReferenceCount () const
             { ((PARTI_Descriptor*) this)->referenceCount++; }
          void decrementReferenceCount () const
             { ((PARTI_Descriptor*) this)->referenceCount--; }
          int getReferenceCount () const
             { return referenceCount; }
          static int getReferenceCountBase ()
             { return 1; }

          UserLocalDomain* getGlobalDomainPointer()
             { 
               PADRE_ASSERT (globalDomain != NULL);
               return globalDomain; 
             }

#if 0
       // I can't we why we need this function!
          void InitializeLocalDescriptor
            ( PADRE_Descriptor<UserCollection, UserGlobalDomain, UserLocalDomain> & globalDescriptor );
#endif

       // This function sets up the PARTI specific data in the representation specific to the
       // size data represented by the PADRE_Descriptor's globalDomain.  If this data has been
       // previously setup then the PARTI specific data is used directly (in this case for the 
       // representation of a second distributed data object)
       // void initializeDistributionLibrary ();
       // ( UserLocalDomain & globalDomain,
       //   const PADRE_Representation<UserCollection, UserGlobalDomain, UserLocalDomain> & representation );
       // void initializeDistributionLibrary ( UserLocalDomain & inputLocalDomain);

       // This is the only way I can see to build a descriptor
          void InitializeLocalDescriptor ();
          void InitializeLocalDescriptor ( UserGlobalDomain & inputLocalDescriptor, 
                                           UserLocalDomain & inputLocalDomain );
       // void InitializeLocalDescriptor
       //   ( UserLocalDomain & globalDomain,
       //     const PADRE_Representation<UserCollection, UserGlobalDomain, UserLocalDomain> & representation,
       //     UserGlobalDomain & LocalDescriptor );

          friend ostream & operator<< (ostream & os, const PARTI_Descriptor & X)
             {
               os << "{PARTI_Descriptor:  "
                  << ", more information as yet omitted"
                  << "}" << endl;
               return os;
             }

       // I wonder if these member functions should not be 
       // better placed into the PARTI_Representation object?
          static SCHED *BuildCommunicationScheduleRegularSectionTransfer
             ( const UserGlobalDomain & LhsDomain,
               const UserGlobalDomain & RhsDomain );

          static void transferData 
             ( const UserGlobalDomain & receiveDomain,
               const UserGlobalDomain & sendDomain,
               const double *sourceDataPointer,
               const double *destinationDataPointer );


          static void transferData 
             ( const UserGlobalDomain & receiveDomain,
               const UserGlobalDomain & sendDomain,
               const float *sourceDataPointer,
               const float *destinationDataPointer );

          static void transferData 
             ( const UserGlobalDomain & receiveDomain,
               const UserGlobalDomain & sendDomain,
               const int *sourceDataPointer,
               const int *destinationDataPointer );

       // These can only be implemented at this level (descriptor) since they require the
       // isNonPartition() member function and this can only be implemented 
       // using the localDescriptor which is only available within this object.
          int isLeftPartition   (int i) const;
          int isMiddlePartition (int i) const;
          int isRightPartition  (int i) const;
          int isNonPartition    (int i) const;

          int isLeftNullArray ( UserLocalDomain & serialArrayDomain , int Axis ) const;
          int isRightNullArray( UserLocalDomain & serialArrayDomain , int Axis ) const;

          void updateGhostBoundaries ( double *dataPointer );
          void updateGhostBoundaries ( float  *dataPointer );
          void updateGhostBoundaries ( int    *dataPointer );

          SCHED* BuildCommunicationScheduleUpdateAllGhostBoundaries ();


     private:
          PARTI_Descriptor ();
          PARTI_Descriptor ( const PARTI_Descriptor & X );
          PARTI_Descriptor & operator= ( const PARTI_Descriptor & X );

public: DARRAY *getBlockPartiArrayDescriptor() { return representation->getBlockPartiArrayDescriptor(); }
public: int nDims() { return getBlockPartiArrayDescriptor()->nDims; }

};	// end of PARTI_Descriptor class;



// KCC and GNU g++ want to see the source code included 
// in the header files for template instantiation
// #ifdef HAVE_EXPLICIT_TEMPLATE_INSTANTIATION
// #include "PADRE_Parti_Template.C"
// #endif

// PADRE_PARTI_H
#endif







