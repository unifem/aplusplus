#!/bin/sh

# This script runs an executable program in parallel.

# The syntax for running programs in parallel differs from platform to platform,
# software to software.  This script automatically uses the correct syntax for
# the environments that it knows about.  For the environments it does not know,
# it has a default that may work.

# This script defines the set of tests to put the program through.
# This set is parametrized by these variables:
# nproc_list: space- or comma-separated list of number of processors to use.


# The name of this script
script_name=`basename $0`

# Define a way to gracefully die from within this script.
# The die function similar to Perl.
# Arguments are: <exit_value> <exit_message>
die () {
    echo "ERROR_MESSAGE_FROM $script_name:"
    if [ -n "$2" ]; then echo "Error $2"; fi
    if [ -n "$1" ]; then exit $1; fi
    exit 99
}

# When no argument is given, print the help message and exit.
if [ $# = 0 ]; then
  cat <<EOF
Usage: $0 <list of nproc> <program name>
This is a generalized script to run a program in parallel.
The number of processors are given by <list of nproc>, which
must be a comma-or-space-delimited list of integers.
Example: $script_name 1,2,5 parallel_program
runs parallel_program 3 times with 1, 2 and 5 processors in turn.
EOF
exit
fi

# Check the redirection environment.
# If REDIRECT_OUTPUT_TO is defined in the environment,
# standard output of the program is redirected there.
# Outputs directly from this script are NOT redirected.
if [ -n "$REDIRECT_OUTPUT_TO" ]; then
  output_redirection_string="1> $REDIRECT_OUTPUT_TO"
else
  unset output_redirection_string
fi
# If REDIRECT_ERRORS_TO is defined in the environment,
# error output of the program is redirected there.
# Outputs directly from this script are NOT redirected.
if [ -n "$REDIRECT_ERRORS_TO" ]; then
  errors_redirection_string="2> $REDIRECT_ERRORS_TO"
else
  unset errors_redirection_string
fi

# Get the number of processors from the first argument of this script.
nproc_list=$1; shift;
# We allow comma-deliminate lists, so we now remove those commas.
echo $nproc_list | grep '^[0-9 ,]\{1,\}$' > /dev/null	\
  || die 1 "Invalid number of processors list '$nproc_list'"
nproc_list=`echo $nproc_list | sed 's/,/ /g'`

# Get the program name from the next argument of this script.
program=$1; shift;
test -x $program || die 1 "No execute permission on '$program'"

# Determine operating system for use below.
if [ $?OS ]; then
  OS=`uname -s`
  export OS
fi

# Determine host name for use below.
if [ $?HOST ]; then
  HOST=`uname -n`
  export HOST
fi

# Add certain directories to the load library path.
# These are not likely to be in the environment set by the user
# because they are specifically for running in this directory.
additional_env="LD_LIBRARY_PATH=../src:${LD_LIBRARY_PATH}"

# Variables required for using mpirun.  These may not be needed,
# but if they are needed and unset, there will be an error.
# Some of these strings are determined at configure time.
mpirun_prog="@mpirun@";	# Name of mpirun program.
machinefile_flag="@MPIRUN_MACHINEFILE@";	# machinefile flag.


# Define a function to run a program in parallel.
# We have to do this because different environments require different syntaxes.
# The function arguments are:
#   program name
#   number of processor
#
if echo "$HOST" | grep '^blue[0-9]' ; then
  # For blue
  if [ -z "$mpirun_prog" ]; then die 1 "mpirun_prog is required but undefined"; fi
  run_multiproc () {
    program=$1; nproc=$2; shift 2
    MP_RESD="YES"
    MP_HOSTFILE=""
    MP_EUILIB=us
    MP_EUIDEVICE=css0
    export MP_RESD MP_HOSTFILE MP_EUILIB MP_EUIDEVICE
  # IBM shell scripts eat their parameters after the first assignment from them
  # nodes=`expr 1 + \( $2 - 1 \) / 4`
    nodes=`expr 1 + \( $nproc - 1 \) / 4`
  # echo "In generalized-parallel-run script: program = $@"
  # echo "In generalized-parallel-run script: 0th parameter = $0"
  # echo "In generalized-parallel-run script: 1st parameter = $1"
  # echo "In generalized-parallel-run script: 2nd parameter = $2"
  # echo "In generalized-parallel-run script: 3rd parameter = $3"
  # echo "In generalized-parallel-run script: machinefile_flag = $machinefile_flag"
  # echo "In generalized-parallel-run script: nodes = $nodes"
  # echo "In generalized-parallel-run script: nproc = $nproc"
    com="$additional_env $mpirun_prog $program -rmpool 0 -nodes $nodes $machinefile_flag -np $nproc $@"
    echo $com
    eval $com $output_redirection_string $errors_redirection_string
    return $?
  }
elif [ "$OS" = OSF1 ] || [ "$OS" = SunOS ] || [ "$OS" = IRIX64 ]; then
  # For the DEC.
  if [ -z "$mpirun_prog" ]; then die 1 "mpirun_prog is required but undefined"; fi
  run_multiproc () {
    program=$1; nproc=$2; shift 2
    com="$additional_env $mpirun_prog $machinefile_flag -np $nproc $program $@"
    echo $com
    eval $com $output_redirection_string $errors_redirection_string
    return $?
  }
else
  # Simplest case.
  run_multiproc () {
    program=$1; nproc=$2; shift 2
    com="$additional_env $program -np $nproc $@"
    echo $com
    eval $com $output_redirection_string $errors_redirection_string
    return $?
  }
fi


# Run the program.
for nproc in $nproc_list; do
  # Because parallel runs sometimes fails due to problems unrelated
  # to the program, we give it several tries before declaring failure.
  if test -z "$NUM_PARALLEL_TRIES"; then NUM_PARALLEL_TRIES=1; fi
  c=1
  while test $c -le $NUM_PARALLEL_TRIES ; do
    if test $c -gt 1 ; then
      echo "possibly failed.  TRY number $c"
    fi
    $action $COM 2>&1
    run_multiproc $program $nproc "$@"
    exit_value=$?
    if [ $exit_value = 0 ]; then
      break
    fi
    c=`expr $c + 1`
  done
  test ! $exit_value = 0 && die 1 "FAIL running $program with $nproc processors"
done
echo "$program passed run with ($nproc_list) processors."




