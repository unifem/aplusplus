                       PREVIOUS BUGS in A++

   This directory is included since it provides small examples of A++
programs (often exercising obscure parts of A++).  All of these were
at one time a bug in A++ (which is now fixed).  They are all very short
codes (about 20 lines each), but contain no documentation.  Often they 
are what someone has provided as a bug report (small code demonstrating 
the bug).

bug1.C  tests the indirect addressing 
bug2.C  tests the conformability checking
bug3.C  is a cleaned up version of bug1.C
bug4.C  is an experamental array class used for testing small ideas (it tests no bug in A++/P++)
bug5.C  tests the indirect addressing using views of the intArrays used to do the indexing
bug6.C  test the min and max functions (which once upon a time since not work correctly
        report the min value if the values were all negative).
bug7.C  test the use of HPF vs. non-HPF indexing  (subsequent indexing in A++/P++was changed
        to conform to non-HPF indexing, since this is more useful).  This means that
        the base of a view is the base of the index, not some other vaule like ZERO.
bug8.C  tests the use of the operator equals in cases like A = B = C = D = 1;
bug9.C  tests the use of indrect addressing (another sort of test), this function
        also tests the use of the copy constructor when called with a view.
bug10.C test the use of the equals operator (a very simple test, not very meaningful)
bug11.C test the views of views and indirect addressing (like A(I(J)) vs. A(I)(J) which 
        could have different meanings in the case of indirect addressing (as I recall).
bug12.C test the indirect addressing where the input intArray is an expression.
bug13.C test A++ arrays using non-ZERO bases (this has been a nasty problem for A++, historically,
        though it seems to have all been fixed now).



