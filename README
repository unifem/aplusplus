********************************************************************************
                           A++/P++ Distribution
********************************************************************************

   Just to clearify any first impressions, A++ is a serial array class library
(i.e. for serial machines like the SGI, Sun, Cray, RS6000 etc.) and P++ is a
parallel array class library (i.e. for paralle MPP machines, networks of workstations,
etc.).  Both A++ and P++ share an identical interface and thus allow the simplified
development of numerical software in the serial environment and the recompilation
of that final software (using the P++ library instead of the A++ library) on to
paralle machines.  The price you pay for this is about a factor of two in performance
over that of optimized FORTRAN (in a serial environment without accounting for communication
in the parallel environment).  The communication done in P++ is the same as that which would
be require in a FORTRAN application using explicit message passing, so there is no 
difference in the cost of the communication between P++ and any other tool you might
want to use (like PVM or MPI).   

   P++ can use either PVM or MPI internally (specify this at compile time), the user
never sees any level of message passing since all message passing is handled within
the P++ interface (interpreted at runtime so as to permit the dynamic partitioning
and redistribution of arrays).         

   Several other class libraries are avaialbe which build on top of A++/P++
array objects.  A grid function library for example permits the simplified
use of mapped grids (as C++ objects) for development of applications
where grid geometry plays an important role.

   Please send us bug reports (since A++/P++ has been in use for a long time
there are not many bugs, but they happen).  See the web page at 
www.llnl.gov/casc/Overture for the web form for reporting bugs.

Dan Quinlan
dquinlan@llnl.gov

********************************************************************************
                         A Little Bit About A++/P++ 
********************************************************************************

    This is the A++/P++ distribution.  This is the combined A++ and 
P++ distribution and is given a version numbering specific to the combination.  It
represents work in progress.  A++/P++ is a seial/parallel C++ array class library.
It simplifies the development of numerical codes.  A++ has been in use since 1993
(and so represents several years of bugs fixed) and is stable.  P++ is the newest
piece of work and has been stable since 1996, internally both build from the same 
original source code (so that bug fixes in A++ are represented in P++ and so 
that A++ cannot diverge from P++ with respect to its basic array class behavior).

   Expression Temaplates are an optional feature since early 1997, we provide it
optionally since it has sometimes astronomical compile times and is far less
portable that the binary operator implementation.  The option to use expression templates
is located in the configure script that builds the A++ or P++ installation.
However, a third execution mechanism (ROSE) is also in development that permits 
the preprocessing and C++ source-to-source translation of application 
code using the A++/P++ array class.  This later work is still being developed
(as of early 2000).

   The decission to share the source code for A++ and P++ is done in the rather
uncerimonious use of m4 macro preprocessing.  Note that this is only the way that 
the A++ and P++ source code is built, and that no use of m4 is assumed for user code
written in A++ or P++ (that would be a horrible sort of interface).  m4 is also used to
build the source code for the double, float, and int arrays from macros that are
independent of such primative types.  The macros are not available and would not
be useful for anything more general, they are mearly a way to simplify the development
of the A++/P++ source code.

   Thus A++/P++ provides specialized types doubleArray, floatArray,and
intArray.  An alternative templated interface is in development,
A++P++ is presently about 90% templated internally, though exposure of
the templates to the outer level interface has significant tradeoffs
in compile time (much longer compile times) and is thus
problematic. furture versions will be available in both templated and
non-templated forms to simplify the users development of application
codes.

   The version of P++ works on multiprocessor systems. It ipresently
works on a large number of parallel systems (Networks of Workstations,
the Cray T3D, the SP2, the Origin 2000, and others).  The Distribution
version no longer contains internal debugging code so the performance
has improved significantly over previous releases of P++.  P++ has
been available since 1994, though initial versions where not as
stable.

    This version of P++ uses either PVM or MPI for its implementation.
This version of P++ also uses the PADRE Library for data decomposition
and parallel communication scheduling.  PADRE is part of the DOE 2000
SciTL library developed at Los Alamos.  PADRE was developed by Kei
Davis, Brian Gunney and Dan Quinlan and internally uses Block PARTI
work from Alan Sussmann, Gagan Agrawal, and Joel Saltz.  The Block
PARTI work represents the lower level of parallel communication in P++
and simplifies the P++ parts specific to parallel communication.
However the use of Block PARTI has required some limitations on the
generality of the partitioning present in this version of P++.


********************************************************************************
How to configure A++/P++ to different machines
********************************************************************************

    It is our experience that A++/P++ is easy to configure to different
machines.  Many common plaforms are already supported.  To configure, compile
and build A++/P++ for an unrecognized "architecture-C compiler-C++ compiler"
combination, the user must add to the file "A++/config/config.options" by writing
a new block of options for the new machine.  The option names were chosen to be 
self-explanatory, but if any questions remain please contact us.  Please contact 
us even if you have no questions and get A++/P++ to work on a new platform
since we would like to add your contribution to the config.options file to our
distribution.

More information on how to run configure and it's options are contained in
the INSTALL file located within the toplevel A++/P++ directory.

********************************************************************************
                           A++/P++ Distribution
                              (version 0.7.2)
********************************************************************************

   A++/P++ now uses the GNU AutoConf and AutoMake tools to manage the distribution.
AutoConf has built a machine independent configure script (called "configure"),
this script builds the Makefile specific to your particular architecture.  In general,
the configure script looks for the things that A++/P++ requires:
   C++ compiler
   C compiler
   PVM or MPI (for P++ only)
   PADRE (for P++ only, though we have decided to distribute PADRE with P++)
Configure builds a Makefile, the resulting Makefile can be used with any "make"
program (it is not specific to GNU make).

  Autoconf is smart enough to look in common places for the programs it needs.  
In certain cases though, the user may need to indicate where certain files are located.
A common example of this is the location of the message passing library MPI used in
the compilation of P++.  

  Autoconf also accepts many options for customization.  For example, you can 
explicitly set the flags passed to the C compiler for optimization.  To see 
them all, type 'configure --help=recursive' in the top directory and in the A++ and 
P++ directories.  In particular, configure --help=recursive in the top directory indicates 
that passing the '--enable-PXX' option to configure will turn on configuration 
and compilation of the P++ library.  THIS IS NOT THE DEFAULT.  By default only 
A++ will be configured and built by make.  Most users are not interested in 
parallel applications and do not have the required software installed to 
complete the configure process for P++ (MPI is required).

  Since building shared libraries tends to be very platform dependent and
may require tweaking of compiler and linker flags, we do not attempt to
build them by default.  If the user wishes to make
shared libraries, specify '--enable-SHARED_LIBS' on the configure line.  
The configure script will attempt to build a simple executable to test 
the compiler and linker flags.  If it succeeds, it will use these same flags
to compile and link for A++ and P++.  If the tests fail, only static libs
will be built.  In this case, please contact the developers to help you get
correct compiler and linker flags for your platform.

  We have developed a new mechanism for setting default values for many of the
common configure line options.  The default values are stored in a file:
A++/config/config.options and the configure script uses the perl script:
A++/config/optionParser.pl to read option values from this file.  Setting 
default values for a new machine or compiler is as simple as creating a 
new block with the same format as all the other ones and filling in the
option values for your particular configuration.  
  When configure runs, the script 'tarch' will determine an architecture name 
and CC and CXX will hold the C compiler and C++ compiler names respectively.  
The compilers could be specified on the configure line by using "--with-CC=" 
and "--with-CXX=" syntax.  If the platform is not recognized, the default 
options will be those for gcc and g++ which we hope are universal across
platforms.


Configuring A++ and P++

  To compile A++ and P++ run configure in the top level directory.  You will
then have a Makefile (and Makefiles in most of the subdirectories).  The Makefile
at the top level will call all the Makefiles in the subdirectories, so you don't have
to worry about that.  You can alternatively call the Makefiles directly in any 
of the subdirectories, this is helpful to build only A++ or P++ (and not both).

  We have provided some example shell scripts to help ease the configure process
on various platforms.  These files are named configureForXXXX where XXXX may be:
CC - for solaris CC, Egcs - for using the egcs compiler, KCC - for using KCC compiler, 
Compass - for the Compass cluster of DEC's at LLNL, and Blue - for the ASCI Blue 
machine at LLNL.  These scripts are simply examples to show users how various
options are passed to configure.  We expect that examining these will help to
answer some questions about how to specify options to the configure command.

  Note that part of the design of AutoMake is that it either does or will
conform to a number of standards for the distribution of software.
Distributions using AutoMake are GNU standards-compliant.

   There are numerous options to the Makefiles that are generated, this is the
advantage of using AutoMake (since it builds the Makefile.in which the configure
script uses to build the Makefile).  Options include:

   all:        --- Builds everything
   Makefile:   --- Rebuilds the Makefile
   ID:         --- (I don't know what this does)
   TAGS:       --- (I don't use this)
   distcheck:  --- (tests a distribution - This is an impressive mechanism 
                    when it builds and runs all test programs)
   dist-all:   --- Builds a distribution
   install:    --- Installs A++/P++ into a common location (the GNU default is /usr/local)
   uninstall:  --- Uninstalls A++/P++ from the common location (the GNU default is /usr/local)
   clean:      --- Removes Object files build by the Makefile
   distclean:  --- Removes files build by configure (I think)

   There are numerous other options too, these build the documentation and provide
maintainer options as well. 

Automatic Installation 

  The 'make install' option places the libraries in a special location.  The A++ 
libraries are put into $(exec-prefix)/A++/lib/$(ARCH)_$(C_COMPILER)_$(CXX_COMPILER)/lib 
where $(exec-prefix) is specified at configure time via --exec-prefix= option or in 
one of the shortcut files (configureForCC, configureForCompass, etc.), and 
$(ARCH) is the architecture (e.g. solaris, alpha, rs6000, linux),  $(C_COMPILER)
and $(CXX_COMPILER) are the C compiler and the C++ compiler used in the make.  A
link to the include directory is placed next to the lib directory.  Also in this 
directory is a file README.info which contains a list of all the options that the
configure script was given or figured out on its own.  This can be a handy guide
for compiler options etc. when building application codes using these libraries.
The P++/lib directory is organized in the same way.

  This automatic installation process puts some restrictions upon the (human) 
installer.  Since we use the variables $(C_COMPILER) and $(CXX_COMPILER) to 
create a directory name, if the user must specifies these compilers at configure
time via the --with-CC and --with-CXX options, they must use only the name of 
the executable- no pathname, no options, etc.  Compiler options are more 
appropriately specified using the --with-CFLAGS and --with-CXXFLAGS configure
options. 

Reporting Errors (see web site www.llnl.gov/casc/Overture for bug report form):
  Three common types of errors that occur while installing A++/P++ are:  Errors 
in the configure step, compilation errors, and code bugs.  The idea behind using
the autoconf tools to configure the distribution is to minimize the number of
pre-compile difficulties.  However, we are not perfect coders and on occasion 
our configure script proves to be too weak, especially on new platforms.

  If an error occurs during the configure step, please email us the output of the
configure command which can be saved like:'configure >&! configure.output'.  
Prior to re-running configure as above, please remove the top level config.cache 
file so that the configure script has to reproduce each step as in the time it
failed.  Another useful piece of info is the top level config.cache file after
the configure script fails.

  If an error occurs during compilation- including problems with incorrect 
parameters being passed to the compiler, please email the output of 'make print'
executed in the A++ directory.  If you are building P++, also send the output
of 'make printPpp' executed in the P++ directory.  These make commands print
out most of the variables assigned in the configure process and usually go
a long way to pointing out why a compilation fails.

  Bug reports are always welcome.  The best way to provide a bug report is
to send the smallest code that exhibits the bug along with some information about
the platform, compiler, options, etc.  (maybe even the output of 'make print'
from the A++ directory!)

***************
Use of rpath in linking with dynamic libraries

Comment as it appears in:
## Support for rpath which allows executables to specify specific dynamic libraries without 
## using $LD_LIBRARY_PATH.  Upon execution if the location of the library has been specified by RPATH
## then only that location is searched. If RPATH is NOT specified then the location of 
## LD_LIBRARY_PATH is searched.


Have fun and let us know about any problems, thanks,
Dan

dquinlan@llnl.gov


