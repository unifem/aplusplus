2002-1-21 Dan Quinlan
	Fixed minor compilation and testing problems associated with use
 	of SGI and IBM, and some warnings issued by the GNU g++ and gcc
 	compilers. (Files where not all removed after uninstall, and tests
 	on the install process failed on the SGI and IBM (added
 	$(CXX_OPTIONS) to compile and link lines).
	
2002-1-20 Dan Quinlan
	IBM xlC compiler is particularly picky about the scope of declarations of friend functions
	and the use of parenthesis in new oparators.
	1) Functions must be declared in the scope where they are used, so that a 
	   friend function declaration in a class is not sufficient and it must be
	   additionally declared outside of the class.
	2) "int* x = new (int* [length]);" will not compile, but "int* x = new int* [length];" will.
	3) pointers to member functions can't have any redundant parenthesis.
	   E.g. "fooMain ( &(A::foo) )"  must be represented as "fooMain ( & A::foo )".
	
2002-1-19 Dan Quinlan
	Fixed configuration setting of LIBS for MPI and default setting for 
	MPI on IRIX to allow A++/P++ to compile and test on the SGI (riptide).
	This was done as part of preparation for tests of A++/P++ at NASA using
	an SGI Origin 2000 machine.

	Fixed John Lyon's test code (dqDeveloperTests/test2000_45.C) to call MPI_Finalize()
	before exiting (failure to do so is an error on the SGI (using the verdon's MPI).
	
2002-1-11 Dan Quinlan
	Fixed bug in intallation of A++/P++ (libs were not installed
 	because they were built using noinst_LIBRARIES mechanisms).

	Added a installcheck rule in the A++/TESTS directory and in the
 	P++/TESTS directory to verify that we can compile against the new
 	installation.  This is called automatically (using
 	install-exec-hook rule to force the call to the installcheck
 	rule).  So now when we run install we also verity that codes can
 	be compiled using the installation.

	Change the name of the install direcot to "install" from "lib".

	Added the Makefile.user.defs file to the install directory (so that it can be used to
	report the relavant make variables used to build either A++ or P++).
	
2002-1-10 Dan Quinlan
	This version of A++/P++ contains a revised configuration.
	It reduces the number of configure scripts called (from 7 to 3)
	and greatly speeds up the configuration process.  Additionally
	the libraries built are built directly from stored file names
	(in the Makefile.am files) so that the development process
	is as fast as reasonable.  In general the configuration mechanism
	is much simpler and faster than it used to be (plus I understand
	all the details, which was not true previously).

	PARTI has been moved to be a subdirectory of P++ (at the same level
	as the PADRE directory).  PADRE has lost it's separate configure.in
	and it handled by a more direct means from the P++/configure.in.
	All the macros have been reused (with some bugs fixed).

	The are now only two config.h files generated, one for A++ and one for P++.
	But they should have better names more specific to their use for A++ or P++
	(this has not been done yet).

	This version also fixes many minor inconsistancies that have been caused 
	by multiple people working on the code. And likely represents some personal
	bias on my part about how A++/P++ should be setup.
	
2001-12-20 Dan Quinlan
	With Brian Miller's help, we have fixed the A++P++ configuration
 	to work with the newer versions of Autoconf
 	(version 2.52) and Automake (version 1.5).  This took a little
 	more than a day to do, the notes from the experience are in the
 	ROSE directory (since I took notes so that ROSE could be converted
 	to the new versions subsequently).

2001-12-13 Dan Quinlan
	Version 0.7.8a:
	Fixed use of STL-1995 so that where this used to be a link, it is not a directory and the link
	to STL is called STL-link.  This matches the use of STL-link in the acmacros autoconf files.
	This version represents the last version to use automake 1.4 and autoconf 2.13 the next
	version of A++/P++ will use automake 1.5 and autoconf 2.52 (Brian Miller has helped make the 
	switch to the new versions of automake and autoconf).
	
2001-4-25 Dan Quinlan
	Added "-max_threads=40" to purify options in A++P++_common_autoconfig.m4 to avoid error in
	A++/test2000_16.C (which tests the use of threads).  The test program failed to
	run with purify and purify issed a messsage suggesting the use of "-max_threads=40" as an option.

	NOTE: setting "-max_threads=40" did not seem to help.  Purify still reported that only 20
	threads where allowed and suggested (again) to increase the max_threads using "-max_threads=40".
	So I changed the test code to require 16 threads instead of 32 threads.
	
2001-4-24 Dan Quinlan
	Special care must be taken in pushing the last array id onto the stack if it is a P++ array.
	The mechanism to cleanup memory after the last array has been deleted has to be called from the
	P++ object (if it is the last array) or the Serial A++ object if it is the last array.  This
	tricky detail caused several test codes to fail and is now fixed.

2001-4-23 Dan Quinlan
	Fixed some simple purify errors that were reported.  It still seems that some purify MIU warnings
	are reported though the memory cleanup is called afterward and it appears to clean up everything.
	
2001-4-21 Dan Quinlan
	Finally seems to have fixed Stefan's 2nd bug for 2001.  This required a modification to P++
	in how array id's where handled internally.  There is now a single array id stack and all
	array id's are pushed and poped from that stack.
	
2001-4-18 Dan Quinlan
	Made Pop_Array_ID a static function and moved the setup of the diagnostics out of that
	function and into a separate function "setupDiagnostics()".  The setupDiagnostics() member 
	function is static.
	
2001-4-17 Dan Quinlan and Brian Gunney
	Fixed the problem with dynamic libraries not having the symbol information in the library
	so that line numbers would be reported properly in the debugger (dbx).  The solution is
	to NOT delete the directory used to hold theoriginal object files used to build the dynamic 
	library.  The original object files used to build the library are required because they
	contain the absolute path to the source files while the dynamic library only contains
	the relative path to the object files.
	
2001-4-17 Dan Quinlan
	Changed version number to AXXPXX_VERSION=0.7.7f.

2001-4-16 Dan Quinlan
	Fixed Stefan's latest bug (test2001_06.C).  This bug fix only works when PADRE is not used.
	The testcode demonstates another bug in PADRE (the APP_Global_Array_ID variable is incremented
	for each array object built and not prperly decremented by the constructor).  This might be
	a matter of changing the test which sets the resetReferenceCountAndReturnArrayID variable.


2001-4-14 Dan Quinlan
	Found work around for Stefan's first bug (for 2001).  The work around is to not use PADRE.
	
2001-03-27  Brian T. N. Gunney  <gunneyb@llnl.gov>

	* P++/configure.in, P++/acconfig.h, P++/A++_headers.h:
	Removed USE_MPI macro which has been superceeded
	by ..._ENABLE_MP_INTERFACE_MPI.

	* P++/PADRE: Some cleaning up and further steps toward working
	with GlobalArrays.

	* P++/PADRE/config/support-Fortran.m4 (Fortran_LIBS): Fix
	bug of gcc-2.96 not knowing where libg2c is.

	* P++/configure.in: Cleaned up how we decide between
	MPI and PVM and LAM and MPICH at configure time.
	No longer using variables MPIINCLUDE, MPILIBS and MPILIBDIRS;
	use mpi_INCLUDES and mpi_LIBS to match conventions
	adopted in this package.  The AXXPXX_FIND_MPI is not
	called if we use LAM or we specify the prefix where MPICH
	is installed.

2001-03-20  Brian T. N. Gunney  <gunneyb@llnl.gov>

	* P++/PADRE: Now using generic config.h and specific
	PADRE_config.h.  Further debugging for GlobalArrays
	support.  Still not done.
	
	* P++/PADRE/PARTI: Now using generic config.h and specific
	PARTI_config.h.

2001-03-12  Brian T. N. Gunney  <gunneyb@llnl.gov>

	* config/A++P++_common_autoconfig.m4, config/optionParser.pl,
	* config/config.options: Move all options away from optionParser.pl
	and config.option method.  Everything is handled via autoconf
	macros now.  Most of the variables defined by config.options are
	now defined in A++P++_common_autoconfig.m4.

2001-03-08  Brian T. N. Gunney <gunneyb@llnl.gov>

	* */Makefile.am: Do not use $? to rebuild libraries
	from other libraries because some library generation
	commands are incapable of selective updates.
	
2001-03-07  Brian T. N. Gunney  <gunneyb@llnl.gov>

	* P++/PADRE/src: Removed obsolete PARALLEL_PADRE and
	SERIAL_PADRE macros.  Serial appears to never have
	been implemented.

2001-03-01  Brian T. N. Gunney  <gunneyb@llnl.gov>

	* P++/PADRE/src: Cleaned up code by introducing
	typedefs for long typenames.

	* P++/PADRE/tests: Added tests directory for PADRE.
	Not working yet, but not part of default config yet.

	* config/A++P++_common_autoconfig.m4: Shuffled around calls
	to compiler-id to make sure preprocessor is defined first.

2001-02-23  Brian T. N. Gunney  <gunneyb@llnl.gov>

	* config/A++P++_common_autoconfig.m4, config/config.options:
	Removed the use of many config.options variables which are
	better determined by checking the compilers ID and the OS.
	Templates and dynamic-loading related variables are not done
	yet.

2001-02-22  Brian T. N. Gunney  <gunneyb@llnl.gov>

	* SCRIPTS/makelinks: Checkout or export acmacros if it
	does not exist.

	* config/shared_lib_check.m4: 
	* P++/config/P++_mpirun_check.m4: Use new library building
	commands defined in compiler-ar.m4.

	* config/config.options: Removed obsolete variables so they
	will not be accidently used.

2001-02-20  Brian T. N. Gunney  <gunneyb@llnl.gov>

	* P++/PADRE/configure.in, P++/configure.in:
	Added use of BTNG_SUPPORT_LAM.

2001-02-19  Brian T.N. Gunney  <gunneyb@llnl.gov>

	* SCRIPTS/remote-check-dist-file: Fixed bug in echo string test.

	* P++/include/makefile.build (PPP_ALL_HEADER_FILES): Add relevant
	variables that were defined by the obsolete FileNames.lst.

	* P++/src/MDI/makefile.build: include A++ version of
	FileNames.lst; P++ version no longer necessary.

2001-02-16  Brian T. N. Gunney  <gunneyb@llnl.gov>

	* SCRIPTS/makelinks, P++/src/Makefile.am, P++/src/MDI/Makefile.am:
	* P++/src/OPERATORS/Makefile.am, P++/src/array_src/Makefile.am:
	P++ no longer uses FileNames.lst because no directory needs
	to know source codes are used in another directory.  In favor
	of incremental changes, this is not yet applied to A++.

	* P++/src/array_src/Makefile.am, P++/src/Makefile.am:
	Create libPppSource_static.a library in
	P++/src/array_src so static_initialization.o is not
	included in libPppSource.a.  This caused a problem with the
	KCC compiler when P++/src updates static_initialization.o in
	building P++/src/libPpp_static.a--multiple objects error.
	libPpp_static.a now does not build directly from
	array_src/static_initialization.o but instead unpacks
	array_src/libPppSource_static.a.

2001-02-14  Brian T. N. Gunney  <gunneyb@llnl.gov>

	* P++/src/Makefile.am, A++/src/Makefile.am: Exit 1 if a library
	does not exist after it is build.  (Sometimes, this happens!)

	* P++/src/Makefile.am
	* P++/src/array_src/Makefile.am
	* P++/src/OPERATORS/Makefile.am:
	Specify library building rules using CXX_SHARED_LIB_UPDATE
	and CXX_STATIC_LIB_UPDATE for all C++ libraries to prevent
	KCC case from missing symbols.

	* config/A++P++_common_autoconfig.m4: Remove old (commented out)
	code to set ARCH, now that AC_CANONICAL_HOST has been working
	well for some time.  Also removed related comments that seem
	ancient.

	* P++/src/Makefile.am: Create libPpp_nosublibraries.a by unpacking.
	Previous method of listing object files with paths created too
	long a command line on tera.

	* config/config.options: Removed obsolete setting of
	CXX_TEMPLATE_REPOSITORY_PATH.

	* A++/src/Makefile.am: Updated to use library creation rules like in P++.

2001-02-13 Brian Gunney <gunneyb@llnl.gov>
	* libraries: Use CXX_STATIC_LIB_UPDATE and CXX_SHARED_LIB_UPDATE.
	* configuration: Introduce acmacros directory of generic macros.
	Add file SCRIPTS/ap-checkout as an example of how to check out from
	cvs to include the new acmacros directory.
	* P++/PADRE/src/PADRE_Parti_Template.C: Fixed bug assuming 4D arrays.

2001-2-10 Dan Quinlan
	Added P++/PADRE/IndirectAddressing directory to CVS.
	
2001-2-10 Dan Quinlan
	Added support for compile time defined macro USE_PARALLEL_INDIRECT_ADDRESSING_SUPPORT
	to turn on an off source code at compile to (to permit the optional support of 
	indirect addressing).  The default currently is that USE_PARALLEL_INDIRECT_ADDRESSING_SUPPORT
	is undefined.

2001-2-8 Dan Quinlan
	Added P++/PADRE/IndirectAddressing directory containing Brian Miller's low 
	level support for parallel indirect addressing.  Brian Gunney, Brian Miller and I added
	the configuration support for the optional use of indirect addressing.

2001-1-18 Dan Quinlan
	Fixed use of Internal_Partitioning_Type::SpecifyDecompositionAxes to print warning and ignore 
	any modification if there are exisitng arrays built using the partitioning object.  This
	permits A++ code which would not be sensative to this error to be run (though with some 
	loss of optimization).  This fix was suggested by Bill Henshaw and should simplify the
	testing of P++ with Overture.  We can change it back at a later point and enforce
	the test on BOTH A++ and P++ at that time.  It should have been enforced for A++
	all along, but this was missed.

2001-1-16 Brian Gunney <gunneyb@llnl.gov>
	Completely removed use of ARCH in configuration, subsituting host_os instead.
	Removed obsolete tarch file.
	Centralized version number setting in macro AXXPXX_VAR_VERSION.
	Warn user if we know that prefix is not writable.
	Sublibrary no longer uses CASC_FIND_MPI or any CASC macros (which use ARCH).
	  They inherit MPI variables as they do other variables from P++.
	check-dist-file runs make install to check installation process.
	Fix bug in choose-STL.m4, resetting CPPFLAGS too early.
	Fixed overlook use of CXXOPTIONS in shared library checks.
	Install PADRE's and PARTI's "config.h" files, previously overlooked.
	Rewrote clean-local and distclean-local rules for TESTS and EXAMPLES directories.
	Rewrote install-*-local and uninstall-local rules for distribution sublibraries.
	Added Makefile.override.install.includeHEADERS to override a buggy automake rule
	  that break some make installs.
	Rewrote check-dist-file to use Bourne shell version of sla.
	
2001-1-15 Brian Gunney <gunneyb@llnl.gov>
	Allow disabling of mpirun check.
	Changed PADRE template argument names to fix switched global/local phrase.
	Fixed missing @CXXFLAGS@ in A++/EXAMPLES.
	
2001-1-08 Brian Gunney <gunneyb@llnl.gov>
	Clean up P++_mpirun_check.m4 and fixed poe syntax.
	Changed prefix to add appendage [AP]++/lib.
	Most uses of ARCH have been exchanged for host_os.
	CXX_TEMPLATE_REPOSITORY_PATH is obsolete (use $(top_builddir)/src).
	
2001-1-5 Dan Quinlan
	Fixed use of "bool" in descriptor.h and domain.h so that member data are now "int" so that they
	will be aligned with the C language version of the related structures that can't use "bool".

2001-1-4 Dan Quinlan
	Added support for bool (in place of previous use of "Boolean" typedef).

	Fixed use of tar/gtar problem on DEC by using Brian Gunney's directory if utilities
	in my path.  This force me to fix the use of mpirun (using "dmpirun" instead of "mpirun"
	since the version of MPI found is the one in Brian's directory).
	
2001-1-2 Dan Quinlan
	Fixed configuration to permit default value of MDI_C_DEBUG to be that of C_DEBUG.

	Added test scripts "purify_check" to look through purify output (error files)
	to find any errors.  This part needs to be automatically run.

2001-1-1 Dan Quinlan
	Added configure support for setting the C_DEBUG variable specific to the MDI directory.
	Finished fixes related to the update from 12/28.  Commented out new test in Partitioning
	object's destructor to assert that all lists are ZERO size before deleting
	(see code: partitioning.C).

2000-12-31 Dan Quinlan
	Fixed Partitioning problem in P++ (represented by bug2000_50.C).  This should fix several
	related problem with the partitioning of array objects (as it is done in Overture).  This
	fixed some problems specific to P++ without PADRE which were not previously caught (for example,
	the correct setting of the ghost boundary width in the partitoning object).

2000-12-30 Dan Quinlan
	Found several places to improve the P++ code, marked all with PRINT_SOURCE_CODE_IMPLEMENTATION_WARNINGS
	(which is set to FALSE for distributions and set to TRU for development (must be set explicitly)).
	Fixed several of these already.
	
2000-12-30 Dan Quinlan
	Found and fixed extranious printf from Brian's debugging of PADRE/PARTI/datamove.c,
	this caused purify UMR's.
	
2000-12-28 Brian Gunney <gunneyb@llnl.gov>
	Removed use of obsolete AXX_LIB_PATH and AXX_LIBS from LDADD.
	Nulled lib strings for PADRE and sublibraries due to combining libraries.
	
2000-12-27 Brian Gunney <gunneyb@llnl.gov>
	Removed redundant Makefile variables such as CXX_OPTIONS and CXXOPTIONS.
	Removed obsolete variables AXXPXX_LIB_HOME, AXX_HOME and PXX_HOME.
	Removed unneeded lines in Makefile.config.in.
	Use makefile variable $? in building standard static libraries.
	Fixed use of AM_CONDITIONAL autoconf macros for shared libraries.
	Made AC_OUTPUT commands more concise.
	Do not include obsolete tarch in distribution.
	configure now create links to Makefile.user and test codes in EXAMPLES, if needed.

2000-12-25 Dan Quinlan
	Fixed redundent specification of "-lApp -lApp_static -lm" and "-lPpp -lPpp_static -lm"
	in link lines (this was a problem for the KCC compiler).  Now all the tests pass.
	
2000-12-24 Dan Quinlan
	Changed KCC optimization option in the config.option file to remove the "+K3"
	this should be specifice only if we want all optimization turned on (since it greatly 
	slows the compilation).  It is and important optimization for performance, so
	it should not be ignored.

2000-12-23 Dan Quinlan
	Fixed makefile rule for adding config.h to installation directory (added to P++/include/Makefile.am
	and A++/include/Makefile.am files).

2000-12-23 Dan Quinlan
	Added default prefix to configure.in files located in A++, P++, PADRE, PARTI, and PGSLIB
 	directories.

2000-12-18 Brian Gunney <gunneyb@llnl.gov>
	cd to $(srcdir) before using makefile.build.
	Use generalized-serial-run to run A++ tests.
	Added option for dq developer test in P++ (to be tested before
	  propagating to A++).
	Clean up obsolete code in some Makefile.am.
	Fixed bug in setting PATH in P++_mpirun_check.m4.

2000-12-13 Brian Gunney <gunneyb@llnl.gov>
	Removed potentially confusing and obsolete legacy codes in configuration.
	Fixed problem with local clean rules executing after Makefile has been
	removed by distclean rule.
	
2000-12-13 Brian Gunney <gunneyb@llnl.gov>
	Removed potentially confusing and obsolete legacy codes in configuration.
	
2000-12-12 Brian Gunney <gunneyb@llnl.gov>
	Fixed bug in user Makefile's running example in [AP]++/EXAMPLES.
	Remove obsolete configure-time variables AXX_LIBS, PXX_INCLUDES, etc.
	Fixed LIBS to take flags removed by removing obsolete variables.
	
2000-12-08 Brian Gunney <gunneyb@llnl.gov>
	Fixed minor oversights in configuration change.
	Changed version number to 0.7.7a.
	
2000-12-08 Brian Gunney <gunneyb@llnl.gov>
	MAJOR changes to the configuration.  Many configuration support files have been
	modified, removed, added or moved.  P++ using PADRE no longer assumes PADRE uses
	PARTI.  PADRE with GlobalArrays is compiling.  New methods for configuring for
	STL.
	
2000-12-08 Dan Quinlan
	Fixed delete operator to use the 2 parameter version (void object::operator delete (void*,size_t)).
	This allows A++/P++ delete operators to correctly sense the use of derived objects (important
	for use within Overture objects derived from array objects).

	Fixed bug associated with resetting the reference count of a array ID of a temporary 
	when it is absorbed into the Lhs in the array::operator=(array) member function.

	Made the isSameDistribution member function avalible in A++ to be backward compatable with P++.

	Fixed the partition member function to NOT report an error when multiple references are outstanding
	(this should be fixed better at some point).  So at the moment partitioning a referenced array is similar
	to calling redim (i.e. the reference is broken).  It should be possible to do better than this later
	by saving all references into the array lists in the partition object.

2000-12-05 Dan Quinlan
        Serial Arrays objects in P++ previouslt had a slightly different reference 
	counting behaviour than A++ and P++.  This has been fixed.  The result was that
	the fix required revisiting many details of how reference counting was done and the
	result is abount a months worth of work to make the reference counting uniform
	between A++, Serial Arrays and Parallel Arrays in P++ and internally uniform with 
	each of these.
	
2000-10-19 Brian Gunney
	Put stamp-h.in in PADRE/src to avoid running autoheader in distribution.
	
2000-10-06 Dan Quinlan
	Fixed indexMap bug (optimized 1D case of returning a null array due to no valid points).

2000-10-05 Dan Quinlan
	Also fixed indirect addressing bug (lower dimensional indirect addressing on a view 
	of a higher dimensional array didn't account for the base of the higher dimensions).

2000-10-04 Dan Quinlan
	Fixed indexMap bug (case of returning a null array due to no valid points).

2000-09-27 Dan Quinlan
	Added config.h to installed head files in the A++/lib/<machine-compiler-target>/include
	directory.  This was already done properly in P++'s make install.

2000-09-23 Dan Quinlan
        Fixed error in Array_Domain_Type::Test_Consistancy() function.
	An assertion:
          APP_ASSERT ( ((Index_Array[i] != NULL) && (Local_Index_Array[i] != NULL)) || (Index_Array[i] == NULL) );
          APP_ASSERT ( ((Index_Array[i] != NULL) && (Local_Index_Array[i] != NULL)) || (Local_Index_Array[i] == NULL) );
        was not in a loop using the index "i" to loop over the number of dimensions, as a result it was using the
	value of "i" outside of the loop (with the value of the previous loop bound + 1 (or MAX_ARRAY_DIMENSION)).
	This shoudl have caused an out of bounds error (ABR error in purify), but it does not.
	An explicit test in purify confirms that this error is not caught by purify!!!
	The following message has been placed into the source code (domain.C_m4).

             // NOTE: The out of bounds array access is NOT caught by purify!!!

2000-09-22 Dan Quinlan
	Fixed use of MDI_Get_Default_Index_Map_Data in MDI layer which was being called with 
	MAX_INT and MIN_INT (this single case is problematic).
	
2000-09-17 Dan Quinlan
	Finished last bug in P++ (of the reported bugs).

2000-09-12 Brian Gunney
	Removed all Makefile variable defining PADRE file name.  PADRE_FileNames.lst is now
	completely obsolete and removed.  libPpp and its shared library counterpart does not
	have distribution sublibraries in them.  libPpp_withsubs is built with the distribution
	sublibraries, by the method of extracting the object files from other libraries.

2000-09-11 Brian Gunney
	Removed lines in .h files including .C files (supporting explicit instantiation).
	This is replaced by the same in PADRE.h, which includes all .h files and now
	all .C files also.  This is done in preparation to use Brian's method for handling
	instantiations in template libraries.  Slightly differently, unneeded definitions
	in PADRE_Filenames.lst have been commented out.

2000-08-31 Dan Quinlan
	Fixed A++ error caused by not returning the array id properly in the resize and redim functions.

	Fixed reshape function to decrement the raw data reference count.

	Added test code for redim, resize, and reshape to check handling of the array IDs and to check that
	the correct number of arrays in use is rported.

2000-08-29 Dan Quinlan
	Fixed Purify configuration to include the purify_stubs.a library (in a way that purify could find it
	(not using the -L syntax)).

2000-08-18 Dan Quinlan
	Fixed A++ bug in MDI layer which cased FMR in purify.  The indirect addressing in the case of
	a mixed indexing of intarrays and Index objects built an internal array of ints to use for the indexing
	(the portion of this array was selected or the array enlarged as required).  The largest region of the
	array of ints had to be selected over all operands and over all axes so that it can be allocated
	in the first call (so that subsebuent calls will return a subset of the largest array of
	ints and avoid the freeing of memory and the references to the already freed memory).

2000-08-7 Dan Quinlan
	Fixed allocation of strided data this is used in test2000_24.C and 
	test2000_34.C and with any strided array operations since temporaries 
	of strided operatiosn build strided temporaries.

	Added operator== to array domain to verify that a strided views domain is the 
	same as an array build with a strided index.  This operator is used within internal 
	assertions and explicitly in test2000_34.C.
	
	Modified configuration to add PURIFY (and fixed several bugs in doing 
	so and added support in "make print" rule).

	P++_mpirun_check.m4 previously reset some AUTOCONF variable 
	instead of prepending or addending strings to them
            dnl CPPFLAGS should be prepended not reset
            dnl CPPFLAGS="$MPIINCLUDE"
            CPPFLAGS="$MPIINCLUDE $CPPFLAGS"

            dnl LDFLAGS should be prepended not reset
            dnl LDFLAGS="$MPILIBDIRS $LDFLAGS"
            LDFLAGS="$MPILIBDIRS"

            dnl LIBS should be prepended not reset
            dnl LIBS="$MPILIBS -lc -lm"
            LIBS="$LIBS $MPILIBS -lc -lm"

	Added internal support for PURIFY so that the report mechanism reports purify details
	and so that the exit status can account for the additional test of purify errors.
	
2000-08-7 Dan Quinlan
	Fixed Brian Miller's bug (test2000_22.C and test2000_22B.C) so that he can use the Array Domains for communication records.

2000-08-6 Dan Quinlan
	Fixed VGS memory reference counting problem.  

2000-08-5 Dan Quinlan
	Fixed dependence so that src/OPERATORS/*.C are properly rebuild when CommonCode/operator.C_m4 is modified.

	Added reference counting reporting mechanism to trace reference counts.

2000-08-4 Dan Quinlan
	Improved the reporting mechanism for memory in use (should be more accurate now).

	Removed use of typeCode in the array_domain object.  

	Rewrote much of the DiagnosticInfo class and it's use in A++/P++.

2000-08-3 Dan Quinlan
	Fixed error introduced to CVS repository (default to VSG update causes problems 
	with test_Ppp_execution.C).

	Fixed initialization of schedules in PARTI to prevent purify UMR errors (modified hash.C).
	
2000-07-(19-31) Dan Quinlan
	Added and fixed exhaustive tests of indexing.  Fixed bugs brought out by these tests.

	Set the execution model to always be VSG update so that we can 
	separately debug the reciently introduced bugs in Overlap Update model.

	Added and debugged 5 and 6D arrays and array operations (work with Brian Gunney).

	Added rpath to configuration macros (work with Brian Miller) to permit use of
	dynamic libraries with MPI on the solaris machines.  "rpath" permits the specification
	of a explicit path to search instead of the LD_LIBRARY_PATH which can be impossible 
	to set for the environment where additional processes are run when mpirun is used 
	with more than 1 processor.  Documentation on the semantics of "rpath" is contained
	both in the A++P++/README file and the autoconf macro which sets up MPI details.
	rpath is used in the DQ development directory only (for now).

	Fixed bugs associated with strided indexing of array objects using VSG update.

	Added communication report mechanism that outputs infor specific to the process by which
	the internal communication model operates.  

	Added displayCommunication member function to diagnostic mechanism to count MPI sends/recieves
	and the number of times ghost boundary and VSG updates are called.  This is helpful for 
	both debugging and as a guide to the relative efficency of different optimizations.

        Fixed locations where it was unclear what PADRE functionality should be called in place 
	of the more direct PARTI library calls.
	
2000-07-19 Dan Quinlan
	Fixed the A++/EXAMPLES Makefile.am for IBM make (blue pacific machine).
	I'm documenting this fix in case we see the problem again someday.
	The make rule removed "testcode" and this alone is sufficent to cause
	make to report an error (I guess because "testcode" is a target and 
	it's removal confused the make utility).

	Fixed "check-local" make rule:
             check-local: user-makefile
           #      IBM IAX make reports an error if testcode (a target) is removed!
           #      if test -f testcode; then rm testcode; fi;
                  if test -f testcode.o; then rm testcode.o; fi;
                  make -f Makefile.user testcode
                  ./serial_test_script testcode

	Error cased by removal of "testcode" before fix:
                  if test -f testcode; then  rm testcode;  fi;
                  if test -f testcode.o; then  rm testcode.o;  fi;
                  make -f Makefile.user testcode
                  mpCC_r -DHAVE_CONFIG_H -I. -I. -I../include     -I../include -c testcode.C
                  mpCC_r -brtl        -o testcode testcode.o -L../src -L../lib -L../lib/rs6000_mpcc_r_mpCC_r/lib -lApp -lm -lApp_static 
                  ./serial_test_script testcode
             0:ERROR: 0031-725  Failed to exec program ./testcode; errno = 52
             0:ERROR: 0031-619  execvp error: A file, file system or message queue is no longer available.
          make: 1254-004 The error code from the last command is 255.
          Stop.
          make: 1254-004 The error code from the last command is 2.
          Stop.


2000-07-18 Dan Quinlan
	Fixed Brian Miller's bug (again) so that all the tests codes now run for the NO-PADRE
	and PADRE cases.

	Separated autoconf and automake m4 macros into 1 macro per file (which is standard practice).

	Added execution scripts for A++/TESTS and A++/EXAMPLES (and A++/dqDevelopmentTests)
	directories.

	Added Diagnostics_Manager::testArray ( <type>Array & X ) to do destructive testing of 
	an A++ or P++ array object.

	Removed the previous execution scripts.

2000-07-17 Dan Quinlan
	Fixed use of PTHREADS in A++/TESTS/test2000_16.C to depend upon the definition of the
	USE_PTHREADS macro.  And forced use of A++.h as the header file.  This is so that when
	A++/P++ is configured without USE_PTHREADS defined the A++/TESTS/test2000_16.C test code
	will compile and run.  At present PTHREADS_LIB is ALWAYS defined to be -lpthread,
	independent of the deefinition of the USE_PTHREADS macro.  I think this is fine,
	since it passes all tests on all platforms.

	Changed PPP.m4 to make mpirun the defualt instead of dmpirun, since the mpich libraries 
	are the default this makes the default self consistant.

2000-07-16 Dan Quinlan
	Fixed configuration of P++/TESTS directory to build and run a test script to use the
	mpirun ("parallel_test_script").  The script is built by the PPP_BUILT_TEST_SCRIPTS macro
	in the P++/config/TESTS_RUN_SCRIPT.m4.
	     dnl Run the macro to generate a test script for the automake
             dnl test mechanism to run with each test program 
             dnl (Note: The "\$1" is the only way I could figure out to
             dnl force m4 to add a "$1" to the output script (so that the
             dnl output script could take parameters). The second parameter
             dnl represents the numbers of processors to use in the execution).
             dnl PPP_BUILD_PPP_TEST_EXECUTE_SCRIPTS
             PPP_BUILT_TEST_SCRIPTS(\$1,"1 2 3")
	
2000-07-15 Dan Quinlan
	Added configuration support for Pthreads.  --enable-USE_PTHREADS option on configure 
	commandline.

	Added A++/TESTS and P++/TESTS directories to the build, configure.in and Makefile.am
	files.

	Fixed makelinks script to build link for tarch in both A++/TESTS and P++/TESTS
	directories.

	Fixed the strided allocation of arrays for the case of using PADRE.  The Global_Index had
	the incorrect stride (unit stride).
	
2000-07-14 Dan Quinlan
	Fixed Brian Miller's bug in the initialization of the ghost boundaries widths
	in the Partitoning_Type constructors (didn't use the values from the default
	ghost boundary as specified by the used (used 0 instead)).

	Fixed remaining locations in partitioning.C where many calles to functions 
	didn't have PADRE equivalent functionality (ended in message plus APP_ABORT();)

	Added Diagnostics_Manager::getSizeOfClasses() function to output the sizes of the 
	different classes used within A++/P++.
	
	Diagnostics_Manager::report() function added to report on memory usage.

	Added test files to the TESTS directories from the dqDeveloperTests.
		
2000-07-12 Dan Quinlan
	Added mechanism to mark domain objects so that the size of the elements could be
	determined (using sizeof() operator) (data stored in "int typeCode" variable.

	Diangnostic funtions were added to compute the memory taken up by data plus
	that of the overhead of the array objects (still not accurately computed).
	PADRE uses two domains and so this misrepresents the memory usage by a factor 
	of two.

2000-07-11 Dan Quinlan
	Fixed calls to delete in Internal_Indirect_Addressing_Index::setIndex() and
	Internal_Indirect_Addressing_Index::setIntArray() to use reference counting.
	
2000-07-10 Dan Quinlan
	Discovered that "-g" when combined with "-fast -xO5" can generate code which
	gets the wrong answer.  "-fast -xO5" seems to work fine the problem is adding
	in the "-g" option.

2000-07-09 Dan Quinlan
        if INTERNALDEBUG is defined then turn on BOUNDS_CHECK, this allows scalar indexing
	used within A++/P++ functions to be done with bounds checking.  This is important 
	for the development of the indexCheck functions and future optimizations which bypass 
	the MDI layer in special cases.  This fix was added to the A+_headers.h file in the
	A++ and P++ directories.

2000-07-08 Dan Quinlan
	Added special optimized version of indexMap for 1-3D array objects.
	This function is used heavily in grid generation within Overture.
	Could not reproduce umr from indexMap which was related to the use of
	optimization.

2000-07-06 Dan Quinlan
	Fixed copy constructor option for use with PADRE.

	Modified test code to test different distibutions (test2000_18.C).

2000-07-01 Dan Quinlan
	Fixed P++ to allocated strided views with the same distribution as the 
	non-strided non-view arrays.  This completes (so it seems the copy
	constructor option, DEEPALIGNEDCOPY).  This mechanism forms an important part of
	the parallel indirect addressing mechanism.  Option works with NO-PADRE 
	configuration option.

	Wrote test code for demonstration of option on different dimensional arrays 
	and with different strides (test2000_18.C).

2000-06-26 Brian Gunney
	Fixed and implemented new datamove.c in PARTI.
	Changed P++ to 6D.
	Fixed configuration scripts so that makelinks does not have to be run from
	  above the top level directory.  Consequently, we can now name the A++P++
	  directory anything we like.
	Added more tests in P++/CHECKS
	(previous change)  Created P++/CHECKS directory where P++ runs its checks now.
	  The P++/EXAMPLES directory will be changed to contain examples instead of
	  P++ tests.

2000-06-25 Dan Quinlan
	Added diagnostic tracking to A++/P++ so that we can generate reports on
	the arrays in use at any point in time.  The mechanism builds and maintains
	a dynamic list (a current list) of all array domain objects in use so that
	we can perform operatiosn on this list, currently only the total number of
	array elements are stored.  A more sophiticated mechanism is possible which 
	would track the ammount of memory is use, etc (though this might require
	an identification of the type of array).

2000-06-24 Dan Quinlan
	Fixed the testcode.C to decrement the reference count on data in the array object 
	which was allocated independently (using adopt mechanism).  This allows the
	number of arrays in use to be more accurately computed.

	Fixed array object reference function to properly delete temporaries when used 
	as an input parameter.

2000-06-24 Dan Quinlan
	Relocated the mechanism to automatically free internal memory to the domain destructor 
	instead of the array objects destructor because it is called last (after the array object's 
	destructor).

2000-06-23 Dan Quinlan
	Broke out the construction of the table which reports the distribution of data
	on all processors.  So this table can be used for other purposes than just displaying 
	the data.
	
2000-06-23 Dan Quinlan
	Added displayPartitioning function so that we can see what the distribution 
	is of array objects. (Need to update in manual!)

	Wrote special communication support (in MPI_specific.C_m4) for this work.
	
2000-06-22 Dan Quinlan
        Fixed "ICounter [MAXDIMS+1] = -1;" in MDI files (should be "ICounter [MAXDIMS] = -1;")
	This was a warning on the DEC's at compile time.

2000-06-21 Dan Quinlan
	Fixed use of purify 4.5.1 with P++ (P++ broke purify), fix in array.C_m4.

	// if TRUE this causes a bug in purify !!! (version 4.5.1)
        `#define' MAX_MIN_CALL_IN_DISPLAY FALSE

2000-06-20 Dan Quinlan
	Added multiple options to COPY constructor to permit specialized parallel copies.
        // There are different types of copies:
        //    Shallow Copy
        //        Don't really copy anything (just make a new reference to the existing data)
        //        This is NOT the default!
        //        Supported value: SHALLOWCOPY
        //    Deep Copy
        //        Deep Collapsed Copy
        //             Current functionality of the Deep Copy option.
        //             This IS the default!
        //             Supported value: DEEPCOPY or DEEPCOLAPSEDCOPY
        //        Deep Aligned Copy
        //             Build copy to be same size as original array (might be inefficient)
        //             Supported value: DEEPALIGNEDCOPY
        //        Deep Collapsed and Aligned Copy
        //             This requires additional support from PADRE (table based distributions)
        //             Supported value: DEEPCOLAPSEDALIGNEDCOPY

2000-06-16 Dan Quinlan
	Fixed case of multiple points specified in indexMap function (missed this case).

	Fixed domain copy constructor so that it would handle different options correctly (for P++).

2000-06-13 Dan Quinlan
	Fixed indexMap for multidimensional arrays and views of multidimensional arrays.
	Wrote test code for these cases.

2000-06-13 Dan Quinlan
	Fixed memory leak (really just a case of not retuning the array ID's properly) 
	with adopt member function.

2000-06-12 Dan Quinlan
	Set "#define APP_REFERENCE_COUNT_BASE 1" in A++_headers.h for P++.  Same as existing
	setting in A++).  This fixed bug reported by Brian Miller and permits the correct number of
	array objects to be computed at any point during computations to a "per array object" resolution.

2000-06-11 Dan Quinlan
	Fixed implementation of Internal_Partitioning_Type::Has_Same_Ghost_Boundary_Widths(...).

2000-06-10 Dan Quinlan
	Fixed fix to Stefan's redim bug which was a problem in the "no PADRE" case.

2000-06-10 Dan Quinlan
	Fixed compile time errors with P++ using "no PADRE" option.

2000-05-19 Dan Quinlan
	Reoganized the initialization of Array, Descriptors, and Domain objects.
	Simplified implenmetation, pulled out common parts, and removed much dead code
	which was previously #if/#endif commented out.

	(done at or about this date)
	$2Array_Domain_Type::Fixup_Domain_With_View was changed to $2Array_Domain_Type::reshape
	since it is only used in the resahpe function of the array object.

2000-05-17 Dan Quinlan
	Fixed Stefan's resize bug.  Reimplemented the P++ version of resize to 
	simplify the implementation and leverage other functions.  Wrote test code 
	to check the bug for the future and verified consistant behaviour with A++
	for non-zero bases.

2000-05-9 Dan Quinlan
	Added parallelPrintf function to permit simplified representation of printf 
	output in the parallel environment.
	    printf ("This is a test! \n");
	is output as "NODE  x: This is a test!" on processor x instead of just "This is a test!"
	on every process (which can be difficult to understand).  parallelPrintf(...) is a function
	located in array.C_m4.

2000-05-9 Dan Quinlan
	Fixed use of include "A++.h" instead of include <A++.h> so that gcc -MM (make depend
	mechanism) will properly represent the dependencies of all files upon the A++.h header file.

2000-05-8 Dan Quinlan
	Fixed inline functions with GNU g++.
	GNU g++ does not permit the specification of inline functions within the source file
	(they must be placed in a header file).  The problem is that they will not be found 
	at link time. To fix this I made the inline functions in the 
	P++/src/array_src/p_abstract_op.C_m4 file (along with their declarations in the 
	Common_Code/array.h_m4 file) to NOT be inline.  A more portable fix might be
	best (the INLINE macro is "" if GNU is used and set to "inline" when GNU is not used
	it is defined in the config.h file -- this might make for a better fix later).
	
2000-05-7 Dan Quinlan
	Fixed "command line too long" on Decs. Used *.o for the OPERATROS directory
	and the MDI directory.  I think this is a fix proposed by Brian Miller and Brian Gunney.

2000-05-6 Dan Quinlan
	Wrote test codes for new bitwise operators and conversion operators (for A++ and P++).
	All but one of Stefan's bugs are now fixed in A++ and P++.

2000-05-5 Dan Quinlan
	Added converstion operators for conversion of intArray to floatArray etc.
	(additional 9 operators, 3 for each of the 3 types of arrays).

2000-05-4 Dan Quinlan
	Added bitwise operators (^,|,&,<<,>>) in all their variants (23 operators)

2000-05-2 Dan Quinlan
	MDI (Machine Dependent Interface) within A++/P++ did not correctly generate
	code for the cases of where masks AND indirect addressing used with some 
	array operations.

	* Fixed use of +,-,*,/ of array to array (as opposed to array-sclar and scalar-array)
	operations using indirect addressing AND where masks. the MDI_functions.m4 file was fixed.
	Use of Rhs was ignored for case of indirect addressing (typo).

	* Fixed similar case as above, in Array_To_Array_Operation_Call_Function (macro)
	where for the case of indirect addressing the Rhs as ignored (typo).
	
2000-05-1 Dan Quinlan
	Fixed bug in copy constructor where the indirections arrays where not properly deleted
	(and reference checked) when a copy of an indirectly addressed array objects was made.
	Note that the (DEEP) copy of an indirectly addressed array is not an indirectly addressed
	array (this permits current optimizations and further optimizations in the future).

2000-04-30 Dan Quinlan
	Tried to demonstrate problem with bug report 00-03-27-16-51-22, and could not
	demonstrate the error that the code (bug) refers to.  The code did demonstrate
	another error; the reference could was not incremented properly in the 
	implementation of the operator=().  This is now fixed.
	
2000-04-29 Dan Quinlan
	Fixed getFullRange member function to return a stride 1 index object.
	It previously returned the stride of the riginal array object (incorrect).

2000-04-28 Dan Quinlan
	Bug reported in the inclusion of stdarg.h after A++.h in P++
	application.  Fixed problem by commenting out the definition of
	VA_DCL and VA_START which are not used in PARTI (at least not
	any more).
	
     #if 0
     /* Modified by Dan Quinlan: removed since these are not used */
     /* #ifdef __STDC__ */
     #ifdef STD_COMPLIANT_COMPILER
     #  include <stdarg.h>
     #  define VA_DCL(type,var)              (type var,...)
     #  define VA_START(list,var,type)       ((va_start(list,var)) , (var))
     #else
     #  include <varargs.h>
     #  define VA_DCL(type,var)               (va_alist) va_dcl
     #  define VA_START(list,var,type)        ((va_start(list)), va_arg(list,type))
     #endif
     #endif

2000-04-27 Dan Quinlan
	Fixed bug in Makefile.am so that both -L library locations are 
	placed onto the command line.  I'm not sure that this is a good
	fix since it might be that we only want the location is A++/src
	to be specified.  The problem is that we need at least one to be specified
	or else the examples will not link on the TERA Cluster (and likely other 
	machines).

2000-04-26 Dan Quinlan
	Fixed bug treating sign, mod, fmod, pow, and atan2 as commutative operators.
	Added support in the abstract_op.C_m4 file for non_commutative array-array
	and scalar-array abstract operators.  Note that non-commutative array-scalar 
	abstract operators are not required since the MDI layer's MDI_functions which
	accumulate to an existing Lhs reuse the Lhs data as the accumulator.

2000-04-25 Dan Quinlan
	Fixed Kyle's bug.  A(0,ItegerArrayObject) = 1;

2000-04-24 Dan Quinlan
	Fixed indirect addressing bug caused by previous incorrect fix to Kyle's bug.

2000-04-23 Dan Quinlan
	Fixed numerous minor details in the MDI layer and added MDI_ASSERT 
	(general assertion support).

	Added error detection to codes reported as bugs (added to BUGS directory).
	Fixed example coded reported as bug reports to more simplily produce the 
	essential errors and fixed codes to call APP_ABORT if the error is
	detected.  And exit normally if no error is detected.

2000-03-27 Dan Quinlan
	Fixed build scripts which had the "." problem still present.

	Fixed use of MPI on NCSA SGI reported problem with inclusion of mpi++.h
	and returned to the 1.3 implementation of MPI for that machine. Modified
	.cshrc file to load MPI 1.3 instead of the default.

	Fixed removePreviousTests script (to delete old versions of A++/P++
	on remote machines).

2000-03-25 Dan Quinlan
	Fixed use of A++/P++ where installed on machines (riptide) where
 	the default configuration is to not have the "." in the user's
 	path.  This is an annoying problem, but it happens enough and it
 	previously broke the configure scripts and the build process.  I
 	will leave riptide setup this was so that we have a machine to
 	test this detail upon.  We must be getting pretty far along if
 	this is the nonsense that we are fixing!

2000-03-23 Dan Quinlan
	Fixed the expect scripts so that they gather the information from
 	the remote machines and collect into a single file system (the
 	entire LOGFILES directory is collected).  Log files generated to
 	record the configuration, make and testing are now collected in a
 	LOGFILE directory in a subdirectory that is given a unique name
 	with a timestamp, for example:

	   AUTOMATED_SOFTWARE_TESTS/RIPTIDE_SGI_ONYX2/LOGFILES/DATE-03-24-00-TIME-21-08-36/configure.log

	This allows us to store multiple configuration tests and gatehr
 	all of them at anytime, from any machine.  Because we store the
 	log file in a directory we can have as many as we want for
 	specialized purposes.
	
2000-03-22 Dan Quinlan
	Refixed the MPI_Finalize() issues on machines other than IBM which required that
	it be called (it could not be skipped).

	Added support for DEEP ALIGNED COPY in array object copy constructor 
	(descriptor and domain objects as well).  This work is not finished.

	Tested Sun C++ version 4.2 compiler on machine where version 5 of the compiler 
	is installed.  Added tests to the testDistribution expect script to allow
	version 5 of the SUN C++ to be tested (on a machine where it is installed).
	Added test for version 4.2 of SUN C++ compiler to be tested (on a machine where
	version 5 is installed.
	
2000-03-21 Dan Quinlan
	MPI_Finalize was being called twice and failing on the second call in the
	test_Ppp_execution.C program (P++ test code).
	Fixed MPI_Finalize() bug on the IBM Blue Pacific which previously prevented
	automated testing of A++/P++.  Rewrote the mpi-port.c PARTI_MPI_numprocs()
	function to only call the MPI_Comm_size() function once (previously MPI_Finalize()
	was being called from within this function because the MPI communicator was
	deleted before the PARTI cleanup was complete.  The function is much faster than
	the original implementation (a static variable is set once and then reused).
	I think the original PARTI implementation was just not sufficently rebust, or
	the IBM has a strange version of MPI.  The same problem does not happen on 
	any other version of MPI.

2000-03-20 Dan Quinlan
	Added most of the code and infrastructure for the different types of deep copies
	possible in the parallel environment (see array class copy constructor and it's
	documentation for details).

	Added parserConfiguration files to A++ and P++ directories to support SNiFF.
	
2000-03-19 Dan Quinlan
	Fixed call to MPI_Finalize() in MPI_Specific.C so that it is not called on the IBM (ARCH == rs6000).
	It seems that the internal MPI implementation takes care of calling it (error message):
	   0:ERROR: 0032-151 MPI is already finalized  in MPI_Comm_size, task 0
           ERROR: 0031-250  task 0: Terminated
	This allows the automated test to run without error.  I'm not clear if this is the best fix.

	I don't understand this problem, cpp does not seem to work consistantly (with other machines)
	on the IBM machine.  This is the best fix I have for now.
	#if 0
        // The IBM can't evaluate this test properly (ARCH == xyz) is always TRUE!
        // So we just comment out the test for now
        #if ( ARCH == solaris && CXX == CC )
        // Run this test only on solaris systems where the use of #error 
        // is not more than a warning at compile time
        #if defined(USE_PPP)
        // Test the USE_PPP macro to verify that it is a working mechanism for users
        // to know if they are using A++ or P++ within an application.
        #error "CORRECT: USE_PPP IS DEFINED (tested preprocessor macro done only on Solaris with CC)!"
        #else
        #error "ERROR: USE_PPP NOT DEFINED (tested preprocessor macro done only on Solaris with CC)!"
        #endif
        #endif

        // Comment out the entire test
        #endif

2000-03-18 Dan Quinlan
	Fixed problem with nohup when testing on blue pacific

	Fixed development environemnt so that we can use the development environment on Blue Pacific

	Added Brian's generation of a user makefile to A++/EXAMPLES (was previously only done for
	P++/EXAMPLES).

	Fixed testing script for daily cvs checkout to include compilation and testing for
	with and without PADRE (previously only tested case of with PADRE). 

	Fixed cvs test script to run cvs daily checks without optimization (takes to long otherwise).

	Modified P++/EXAMPLES/test_Ppp_execution.C to test for USE_PPP only if compiling on solaris 
	with sun CC.  Fixed USE_PPP so that it is defined only for P++ applications.  User applications
	can distinguish the use of A++ or P++ based on if USE_PPP is defined or undefined.
	There was a bug in this mechanism previously.  It is now tested in P++/EXAMPLES/test_Ppp_execution.C
	the output of the compilation must be examined to verify that it works.

	
2000-03-17 Brian Miller
	P++/PADRE/copyDistributionFiles was changed to force the 'cp' command so
	that on dec's, where cp is alias to cp -i, the command works.  P++/EXAMPLES/test_Ppp_execution.C
	was modified by commenting out the #error directives so that other compilers don't choke 
	on them so badly.  
	
2000-03-16 Brian Miller
	Added comment to top level install target reminding installers that docs are NOT installed 
	but available in the source.  Added comment to make install at top level to remind installers
	that there are docs in the doc directory that are not installed.  Added '_r' compilers to the 
	list of compilers checked for in casc_mpi.m4.  in P++/EXAMPLES/Makefile.am added support for
	the creation of user makefiles dependent upon the configure variables.  make install moves 
	these files to the $(ARCH)_$(CC)_$(CXX) directory ( above the libs ).  P++/PADRE/config/PADRE.m4
	was modified to remove () where unneeded and replaced $ with \$ where needed.  P++/config/PPP.m4
	was modified in the same way.
	
2000-03-14 Dan Quinlan
	Added AppString class to force autopromotion of char* through
 	AppString object in the construction of array objects from string.
  	This prevents char* from being promoted too easily to an array
 	object and confusing the compiler when overloaded functions take
 	either a string or an array object.  Code is in the domain.[h,C] files.
	The result should be no change to the A++/P++ user interface but allow
	A++/P++ to co-exist with existing functions in overture more readily.

2000-03-10 Brian Miller
	Added rule to A++/config/Makefile.config.in to build .tex files from .C files.
	Added a 'developer-doc' target to P++/PerformanceTest/Makefile.am that builds
	the documentation from the automatically generated .tex files and one master .tex file. 

2000-03-08 Brian Gunney
	Improved the syntax and robustness of A++/config/config.options and the associated
	A++/config/optionParser.pl used to parse the options tables.  The options table syntax
	is now "structured" into brace-delineated blocks.  optionsParser.pl provides more
	robust comment parsing.

2000-03-07 Dan Quinlan
	Fixed use of "Boolean" typedef in PADRE to use "boolean".  Only the GNU g++ compiler
	had a problem with this, and it considered it an error (no other compiler even
	warned about the problem).  So we can now compile P++ with PADRE on all available
	compiler and on all platforms with one or more compilers.

	Also fixed the inclusion of the path to the STL directories (P++/STL and P++/PADRE/STL)
	so that they are included on when using the SUN C++ compiler and the DEC cxx C++ compiler,
	but NOT with the KCC compiler (where it worked anyways since the oder of the search include
	the KCC C++ include direcotries before any on the include path specified by the user)
	and the GNU g++ compiler (where it is the opposent from the KCC C++ compiler and thus an error
	to specify the P++ and PADRE STL directories.

2000-03-05 Dan Quinlan
	Added fix for Dec Alpha to allow it to use the template repository mechanism
        CXX_TEMPLATES=-ptv -ptr$(CXX_TEMPLATE_REPOSITORY_PATH)
	
2000-03-05 Dan Quinlan
	Added fix for Dec Alpha to allow it to use the template repository mechanism
        CXX_TEMPLATES=-ptv -ptr$(CXX_TEMPLATE_REPOSITORY_PATH)
	
2000-03-05 Dan Quinlan
	Added new make rules to A++P++/Makefile.am for building (and rebuilding) the A++/P++ source code.
        #############################################################################################
        ######################   SPECIAL TARGET FOR BUILDING SOURCE CODE   ##########################
        #############################################################################################

        ## These are developer's rules for use by A++/P++ developers

        ## Build all the M4 templates (macros) within the 
        ## MDI and OPERATORS directories for A++ and P++
        macros_and_source:
	     $(MAKE) -f makefile.build all_source

        ## Build the source for for A++ and P++ from the templates in the Common_code directory
        source:
	     $(MAKE) -f makefile.build source

2000-03-05 Dan Quinlan
	Fixed source code in PADRE and index.C to avoid warnings when compiled with KCC.

	Added message suppression for warnings 177 and 550 to KCC compile options.
	These are warnings about variables "declared but not used" and "set but not referenced".
	These warnings occure as a result of the code being used for both A++ and P++
	(through conditional compilation).  We might go back and fix these later, they
	are not reported as a warning with the compilers that we more commonly use for development.

2000-03-05 Dan Quinlan
	Fixed 5 remaining bugs in PADRE source code that prevented the SGI C++ compiler
	from compiling PADRE.  It seems that the SGI C++ compiler does the most aggressive
	syntax error checking with Templates are used.  Several odd errors existed in the 
	PADRE source code which should have prevented ANY C++ compiler from working, only the 
	SGI C++ caught the problems (SUN C++, and KCC failed to catch the problems).

2000-03-04 Dan Quinlan
	The expect script that tests A++/P++ (and our other projects in the future)
	was fixed to handle a problem that occures on machines where the UNIX cd command 
	is aliased to the something that prints out the resulting (new) directory name.

	Comments from the expect script:
	   	# Many systems alias the cd to output the resulting directory path (this causes a problem for us).
		# unalias the cd command (since it is difficult (or impossible) to capture 
		# its output in a file and there is no terminal after we logoff (so the 
		# process ends in an error and the remote_test_script is not called!!!).
		send "unalias cd\r"
		expect -re $targetMachinePrompt

	
2000-03-04 Dan Quinlan
	Added PADRE_HOME makefile variable to start the process by which we can separate PADRE from P++.
	Changed all references to $(PXX_HOME)/PADRE to $(PADRE_HOME).
	
	
2000-03-03 Dan Quinlan
	Added support for depend rule.  Used makedepend program at first but when back ti using GNU gcc -MM
	instead once it was clear that there was no support for the control of what include files were
	listed in the dependence lists.  The problem is that we don't want config.h to be listed
	since it is requently updated by the configure script and it would force all of A++/P++ to be
	recomiled (not acceptable).  gcc -MM permits include<*> entries to be ignored where as
	makedepend does not have this feature.

	Added support for KCC and EXPLICIT_TEMPLATE_INSTANTIATION as part of the work to get A++/P++
	to work with KCC, and GNU g++.

	Fixed PADRE to wock with KCC.

2000-03-01 Dan Quinlan
	Fixed order of inclusion of list.h header in PADRE.h file.  This was a problem for the
	KCC and EGCS C++ compilers.  Also commented out the use of the the operator<<
	in the PADRE_XXX.h header file (fixing an "inccomplete type" error reported by the
	KCC compiler).

	It might also be important to remove the "-I ../STL -I ../../STL" from the compile 
	line so that the correct STL header files will be included (where the C++ compiler
	includes it's own versions of STL, (for example, EGCS and KCC)).  This has not been
        done yet, I don't know if it is required.
	
2000-03-01 Dan Quinlan
	Fixed use of KCC on solaris, and likely other platforms. it seema that
	"$(AR) cru" was always used to build static libraries (inforced by automake!)
	Explicit make rules were required to fix this problem (and get around the 
	rules for building libraries that automake generates).  Our configuration mechanism
	"A++/config/config.options" stores the options that we want to use for each different
	architecture and compiler, but these were not used internally.  They are now, in the
	explicit rules for building the static libraries in the A++/src/Makefile.am and 
	P++/src/Makefile.am files.
	
2000-03-01 Dan Quinlan
	Added exponential option to benchmark PerformanceRange specification.

2000-02-29 Dan Quinlan
        Added 
	--enable-STRING_SPECIFIC_CODE=ARG   manually set use of code requiring string.h (non-portable code)
	option to configuration system so that we can incrementally work on the inclusion of code
	that depends upon the common C string functions into A++/P++.  String functions are not
	very portable (or so I fear). Change made to A++/config/APP_PPP_common.m4.

	Added "#include<string.h>" to A++_headers.h file in A++ and P++ directorys
	(Note: this is the source for what is copied into A++/include and P++/include!).

2000-02-28 Dan Quinlan
	Added P++/PerformanceTests directory which is the location of the new benchmark suite
	that we are working on.  This work is still incomplete, but has now been added to the 
	CVS repository.
	
2000-02-27 Dan Quinlan
	Modified expect library (softwareTesting.expect) to fix a bug in the switch statement 
	for handling different machines.

	
2000-02-25 Dan Quinlan
        makefile.build "make files" where modified to include a links rule so that
	the default rule would only call the makelinks script once (this greatly
	improves the speed of building all source code from the Common_code directory
	when only a few files are modified.  It also sets up the the arrangement that
	we will want to have in the development rules that will later be placed into the
	Makefile.am files (optionally using the automake conditional mechanism).

2000-02-24 Dan Quinlan

	Changed interface of 
        Optimization_Manager::Initialize_Virtual_Machine ("",Number_Of_Processors,argc,argv);
        to correctly fix the adjustment (by MPI_Init()) of the argc and argv parameters.
	The correct parameters are shown above, but were previously
        Optimization_Manager::Initialize_Virtual_Machine ("",Number_Of_Processors,argc,&argv);
        for several months (almost a year) (the previous fix was to use "char***" instead of "char** &").
	The change can more readily be seen in the function prototype
        void Optimization_Manager::Initialize_Virtual_Machine (
	     char* programName, int numberOfProcessors, int argc ,char*** argv);
	and was changed to 
        void Optimization_Manager::Initialize_Virtual_Machine (
	     char* programName, int & numberOfProcessors, int & argc ,char** & argv);
	in this form the argc and argv are passed in a more conventional manner plus
	the number of precessors is passed by reference so that the correct value 
	can be returned.  Since the value of argc and argv mst be allowed to be modified by
	MPI_Init() they are required to be passed in a way that the caller can see the modifications
	(we do this by reference to maintain the conventional calling syntax).

	Fixed calling syntax of all P++ programs to account for the above change.

	Modifued the MPI_Specific.C_m4 and PVM_Specific.C_m4 files to correctly set ad return the
	Number_Of_Processors variable in the parameter list of Initialize_Virtual_Machine(...).
	
2000-02-20 Dan Quinlan
	Added support for the initialization of array objects from strings.
	For example: intArray X = "{{1 2 3}{4 5 6}}";
	This feature was required for the initialization of A++ arrays in the benchmark suite
	from the command line.
	
2000-02-14 Dan Quinlan

	Fixed PADRE to support optional use of Global Arrays (from PNL)
 	the default is to NOT use Global Arrays within PADRE, it does not
 	yet compile, but a lot of work has been done for it's support
 	(this is meant to be an incremental process).  About a 100 files
 	have been modified in this rather large checkin.  Many issues
 	associated with portability across multiple platforms have been
 	addressed, particularly on the SGI.  Scripts have been written (in
 	csh and expect) to permit the automated testing of the
 	installation, complilation and functionality of the A++/P++
 	software across multiple platforms
 	(this work compliments the work that Brian Miller has done to
 	develop numerous autoconf tests).  Numerous options were fixed in
 	the config.options file in A++/config.

	This version fixes numerous issues associated with more general
 	PADRE support.
	
	The scripts are not yet always perfect, I have once had to
 	manually restart a process on the SUN (weyl) machine.  I don't
 	know why this is.  I think we need to get a little experience with
 	the scripts.  Sometimes the xterm answerback mechanism does not
 	work (and expect issue), in which case the timeout mechanism allows the
 	script to continue (happens on the TERA Cluster).

	The autoheader program should not be called as a result of any
 	Makefile rules, this was a problem previously since many machines
 	didn't have it installed and we didn't want to make it a
 	requirement.  This and several other problems mentione by Petri
 	are fixed in this release.

	The scripts in the root directory still need to be organized and
 	the doc directory needs to be updated with the newer documentation
 	and generally cleaned up.
	
2000-01-31  Brian J. Miller  <miller125@llnl.gov>
	* Makefile.am:
 * Changed installation procedure to now put libs and include dirs in 
	$(exec-prefix)/A++/lib/$(ARCH)_$(CC)_$(CXX)/ similarly for P++.
	This requires --exec-prefix to be set at configure time or in the
	configureForXXXX shortcut file.  This change should allow for installation
	of libs and includes in a directory far away from where the source
	files are.
	
1999-12-03  Brian J. Miller  <miller125@llnl.gov>

	* index_macro.m4: 

1999-02-28  Dan Quinlan
 * Added autoconf and automake to A++/P++
 * restarted ChangeLog to conform to GNU standards (or our understanding of them).

