int SIZE 100;
int Node_Number_Table [16] = { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
double Solution     [SIZE][SIZE];
double Old_Solution [SIZE][SIZE];

void main ()
   {
     int i,j;
     int Iterate;
     double Sum = 0.0;
     int Max_Number_Of_Iterations = 10;
     int Right_Message_Type = 100;  /* Arbitrary values */
     int Left_Message_Type  = 101;  /* Arbitrary values */

     int Process_ID           = mypid ();   /* Current Process ID */
     long Processor_Number    = mynode ();  /* The Node ID of this Processor */
     int Number_Of_Processors = numnodes(); /* Total number of Processors */

  /* Compute our partition of the distributed Solution array! */
     int Start = (SIZE / Number_Of_Processors) * Processor_Number;
     int End   = (SIZE / Number_Of_Processors) * (Processor_Number+1) - 1;

  /* Modify ends of the partition! */
     if (Processor_Number == Node_Number_Table [Number_Of_Processors-1])
          End--;

     if (Processor_Number == Node_Number_Table [0])
          Start++;

  /* Initialize whole array to zero! */
     for (i=0; i < SIZE; i++)
          for (j=0; j < SIZE; j++)
             {
               Solution [i][j]     = 0.0;
               Old_Solution [i][j] = 0.0;
             }

  /* Initialize Interior! */
     for (i=1; i <= SIZE-2; i++)
          for (j=1; j <= SIZE-2; j++)
               Solution [i][j] = 1.0;

     for (Iterate=1; Iterate <= Max_Number_Of_Iterations; Iterate++)
        {
       /* Assign current processors partition of Solution to Old_Solution.
          We do this to setup the Jacobi iteration!                       */
          for (i=Start-1; i <= End+1; i++)
               for (j=0; j < SIZE; j++)
                    Old_Solution [i][j] = Solution [i][j];

       /* Do Jacobi relaxation for Laplace Equation! */
          for (i=Start; i <= End; i++)
             for (j=1; j <= SIZE-2; j++)
                Solution [i][j] = ( Old_Solution [i-1][j] + Old_Solution [i+1][j] + 
                                    Old_Solution [i][j-1] + Old_Solution [i][j+1] )/ 4.0;
          
       /* Send the new solution on our boundary to the Right and Left Processors! */
          if (Processor_Number < Node_Number_Table [Number_Of_Processors-1])
               csend ( Right_Message_Type , &(Solution [End][0]) ,
                       SIZE * sizeof (double) , 
                       Node_Number_Table [Processor_Number+1] , Process_ID );

          if (Processor_Number > Node_Number_Table [0])
               csend ( Left_Message_Type , &(Solution [Start][0]) ,
                       SIZE * sizeof (double) , 
                       Node_Number_Table [Processor_Number-1] , Process_ID );

       /* Receive the new solution on our boundary from the Right and Left Processors! */
          if (Processor_Number < Node_Number_Table [Number_Of_Processors-1])
               crecv ( Left_Message_Type , &(Solution [End+1][0]) , SIZE * sizeof (double) );

          if (Processor_Number > Node_Number_Table [0])
               crecv ( Right_Message_Type , &(Solution [Start-1][0]) , SIZE * sizeof (double) );
        }
     printf ("Program Terminated Normally! \n");
   }

